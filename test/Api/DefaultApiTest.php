<?php
/**
 * DefaultApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API продавца
 *
 * # Общее описание <style> .langChange {   text-align: left;   padding: 2px 222px 2px 18px; } </style> <style> .new {   display: inline-block;   padding: 2px 8px;   margin: 0;   background-color: #ffa500;   color: #ffffff;   font-size: 13px;   vertical-align: middle;   line-height: 1.6;   border-radius: 4px;   font-weight: 600;   font-size: 12px; } </style> <style> .newM {   padding: 5px 10px;   display: inline-block;   background-color: #ffa500;   color: #ffffff;   cursor: pointer;   text-align: center;   outline: none;   margin: 0 5px 5px 5px;   #border: 1px solid #07090b;   border-radius: 5px;   min-width: 60px;   font-size: 0.9em;   font-weight: bold; } </style>  Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной провеПродвижение /и API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul> <br>  ## Поддержка Техническая поддержка осуществляется через диалоги в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> <br> <br>  ## Авторизация Авторизация осуществляется по токенам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к API](https://seller.wildberries.ru/supplier-settings/access-to-api).   <br>  <br>  Существует три типа токенов:   <ol>     <li>Стандартный. Используется для работы с методами из разделов: Цены, Промокоды и скидки, Контент, Marketplace, Рекомендации, Отзывы, Вопросы.</li>     <li>Статистика. Используется для работы с методами из раздела Статистика.</li>     <li>Продвижение. Используется для работы с методами из раздела Продвижение.</li>   </ol>    Обратите внимание, что токен отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный токен следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. <br> <br> Обращаем ваше внимание, что интеграции с Порталом Продавца, не использующие Публичное API, противоречат пункту 9.7.6 оферты. <br> Тем не менее, при отсутствии прямой угрозы утечки данных из личного кабинета продавца Wildberries заранее уведомит продавца о запланированной блокировке, связанной с этим пунктом, давая возможность отключить интеграцию. <br> <br> <br> ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul> <br> ## Release Notes <p>Для просмотра обновлений перейдите по <span><a href=\"./releasenotes/index.html\" target=\"_blank\">ссылке</a></span>.</p>
 *
 * The version of the OpenAPI document: 2.16
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for advV0ActiveGet
     *
     * Изменение активности предметной группы для кампании в поиске.
     *
     */
    public function testAdvV0ActiveGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0AdvertGet
     *
     * Информация о кампании.
     *
     */
    public function testAdvV0AdvertGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0AdvertsCreatePost
     *
     * Создание кампании, тестовый.
     *
     */
    public function testAdvV0AdvertsCreatePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0AdvertsGet
     *
     * Список кампаний.
     *
     */
    public function testAdvV0AdvertsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0AllcpmPost
     *
     * Список ставок по типу размещения кампании.
     *
     */
    public function testAdvV0AllcpmPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0CountGet
     *
     * Получение кампаний.
     *
     */
    public function testAdvV0CountGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0CpmGet
     *
     * Список ставок.
     *
     */
    public function testAdvV0CpmGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0CpmPost
     *
     * Изменение ставки у кампании.
     *
     */
    public function testAdvV0CpmPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0IntervalsPost
     *
     * Изменение интервалов показа кампании.
     *
     */
    public function testAdvV0IntervalsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0NmactivePost
     *
     * Изменение активности номенклатур кампании.
     *
     */
    public function testAdvV0NmactivePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0ParamsMenuGet
     *
     * Словарь значений параметра menuId.
     *
     */
    public function testAdvV0ParamsMenuGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0ParamsSetGet
     *
     * Словарь значений параметра setId.
     *
     */
    public function testAdvV0ParamsSetGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0ParamsSubjectGet
     *
     * Словарь значений параметра subjectId.
     *
     */
    public function testAdvV0ParamsSubjectGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0PauseGet
     *
     * Пауза кампании.
     *
     */
    public function testAdvV0PauseGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0RenamePost
     *
     * Переименование кампании.
     *
     */
    public function testAdvV0RenamePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0StartGet
     *
     * Запуск кампании.
     *
     */
    public function testAdvV0StartGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV0StopGet
     *
     * Завершение кампании.
     *
     */
    public function testAdvV0StopGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1AutoActivePost
     *
     * Управление зонами показов в автоматической кампании.
     *
     */
    public function testAdvV1AutoActivePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1AutoGetnmtoaddGet
     *
     * Список номенклатур для автоматической кампании.
     *
     */
    public function testAdvV1AutoGetnmtoaddGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1AutoStatGet
     *
     * Статистика автоматической кампании.
     *
     */
    public function testAdvV1AutoStatGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1AutoUpdatenmPost
     *
     * Изменение списка номенклатур в автоматической кампании.
     *
     */
    public function testAdvV1AutoUpdatenmPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1BalanceGet
     *
     * Баланс.
     *
     */
    public function testAdvV1BalanceGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1BudgetDepositPost
     *
     * Пополнение бюджета кампании.
     *
     */
    public function testAdvV1BudgetDepositPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1BudgetGet
     *
     * Бюджет кампании.
     *
     */
    public function testAdvV1BudgetGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1FullstatGet
     *
     * Полная статистика кампании.
     *
     */
    public function testAdvV1FullstatGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1PaymentsGet
     *
     * Получение истории пополнений счета.
     *
     */
    public function testAdvV1PaymentsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1SaveAdPost
     *
     * Создание кампании.
     *
     */
    public function testAdvV1SaveAdPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1SeacatStatGet
     *
     * Статистика кампаний Поиск + Каталог.
     *
     */
    public function testAdvV1SeacatStatGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1SearchSetExcludedPost
     *
     * Установка/удаление минус-фраз из поиска для кампании в поиске.
     *
     */
    public function testAdvV1SearchSetExcludedPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1SearchSetPhrasePost
     *
     * Установка/удаление минус-фраз фразового соответствия для кампании в поиске.
     *
     */
    public function testAdvV1SearchSetPhrasePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1SearchSetPlusGet
     *
     * Управление активностью фиксированных фраз у кампании в поиске.
     *
     */
    public function testAdvV1SearchSetPlusGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1SearchSetPlusPost
     *
     * Установка/удаление фиксированных фраз у кампании в поиске.
     *
     */
    public function testAdvV1SearchSetPlusPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1SearchSetStrongPost
     *
     * Установка/удаление минус-фраз точного соответствия для кампании в поиске.
     *
     */
    public function testAdvV1SearchSetStrongPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1StatWordsGet
     *
     * Статистика поисковой кампании по ключевым фразам.
     *
     */
    public function testAdvV1StatWordsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1UpdGet
     *
     * Получение истории затрат.
     *
     */
    public function testAdvV1UpdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for advV1UpdIntervalsGet
     *
     * Получение месячных интервалов для истории затрат.
     *
     */
    public function testAdvV1UpdIntervalsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1DelPost
     *
     * Удаление рекомендаций.
     *
     */
    public function testApiV1DelPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbackGet
     *
     * Получить отзыв по Id.
     *
     */
    public function testApiV1FeedbackGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksArchiveGet
     *
     * Список архивных отзывов.
     *
     */
    public function testApiV1FeedbacksArchiveGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksCountGet
     *
     * Количество отзывов.
     *
     */
    public function testApiV1FeedbacksCountGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksCountUnansweredGet
     *
     * Необработанные отзывы.
     *
     */
    public function testApiV1FeedbacksCountUnansweredGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksGet
     *
     * Список отзывов.
     *
     */
    public function testApiV1FeedbacksGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksPatch
     *
     * Работа с отзывом.
     *
     */
    public function testApiV1FeedbacksPatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksProductsRatingGet
     *
     * Средняя оценка товаров по родительской категории.
     *
     */
    public function testApiV1FeedbacksProductsRatingGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksProductsRatingNmidGet
     *
     * Средняя оценка товара по артикулу WB.
     *
     */
    public function testApiV1FeedbacksProductsRatingNmidGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksProductsRatingTopGet
     *
     * Товары с наибольшей и наименьшей средней оценкой по родительской категории.
     *
     */
    public function testApiV1FeedbacksProductsRatingTopGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1FeedbacksReportGet
     *
     * Получение отзывов в формате XLSX.
     *
     */
    public function testApiV1FeedbacksReportGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1InsPost
     *
     * Добавление рекомендаций.
     *
     */
    public function testApiV1InsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1ListPost
     *
     * Список рекомендаций.
     *
     */
    public function testApiV1ListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1NewFeedbacksQuestionsGet
     *
     * Непросмотренные отзывы и вопросы.
     *
     */
    public function testApiV1NewFeedbacksQuestionsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1ParentSubjectsGet
     *
     * Родительские категории товаров.
     *
     */
    public function testApiV1ParentSubjectsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1QuestionGet
     *
     * Получить вопрос по Id.
     *
     */
    public function testApiV1QuestionGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1QuestionsCountGet
     *
     * Количество вопросов.
     *
     */
    public function testApiV1QuestionsCountGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1QuestionsCountUnansweredGet
     *
     * Неотвеченные вопросы.
     *
     */
    public function testApiV1QuestionsCountUnansweredGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1QuestionsGet
     *
     * Список вопросов.
     *
     */
    public function testApiV1QuestionsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1QuestionsPatch
     *
     * Работа с вопросами.
     *
     */
    public function testApiV1QuestionsPatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1QuestionsProductsRatingGet
     *
     * Часто спрашиваемые товары.
     *
     */
    public function testApiV1QuestionsProductsRatingGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1QuestionsReportGet
     *
     * Получение вопросов в формате XLSX.
     *
     */
    public function testApiV1QuestionsReportGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1SetPost
     *
     * Управление рекомендациями.
     *
     */
    public function testApiV1SetPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1SupplierIncomesGet
     *
     * Поставки.
     *
     */
    public function testApiV1SupplierIncomesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1SupplierOrdersGet
     *
     * Заказы.
     *
     */
    public function testApiV1SupplierOrdersGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1SupplierReportDetailByPeriodGet
     *
     * Отчет о продажах по реализации.
     *
     */
    public function testApiV1SupplierReportDetailByPeriodGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1SupplierSalesGet
     *
     * Продажи.
     *
     */
    public function testApiV1SupplierSalesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1SupplierStocksGet
     *
     * Склад.
     *
     */
    public function testApiV1SupplierStocksGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1TemplatesDelete
     *
     * Удалить шаблон.
     *
     */
    public function testApiV1TemplatesDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1TemplatesGet
     *
     * Получить шаблоны ответов.
     *
     */
    public function testApiV1TemplatesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1TemplatesPatch
     *
     * Редактировать шаблон.
     *
     */
    public function testApiV1TemplatesPatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV1TemplatesPost
     *
     * Создать шаблон.
     *
     */
    public function testApiV1TemplatesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1AnalyticsNmReportDetailHistoryPost
     *
     * Получение статистики КТ по дням/неделям/месяцам по выбранным nmID.
     *
     */
    public function testContentV1AnalyticsNmReportDetailHistoryPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1AnalyticsNmReportDetailPost
     *
     * Получение статистики КТ за выбранный период, по nmID/предметам/брендам/тегам.
     *
     */
    public function testContentV1AnalyticsNmReportDetailPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1AnalyticsNmReportGroupedHistoryPost
     *
     * Получение статистики КТ по дням/неделям/месяцам за период, сгруппированный по предметам, брендам и тегам.
     *
     */
    public function testContentV1AnalyticsNmReportGroupedHistoryPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1AnalyticsNmReportGroupedPost
     *
     * Получение статистики КТ за период, сгруппированный по предметам, брендам и тегам.
     *
     */
    public function testContentV1AnalyticsNmReportGroupedPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1BarcodesPost
     *
     * Генерация баркодов.
     *
     */
    public function testContentV1BarcodesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsCursorListPost
     *
     * Список НМ.
     *
     */
    public function testContentV1CardsCursorListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsErrorListGet
     *
     * Список несозданных НМ с ошибками.
     *
     */
    public function testContentV1CardsErrorListGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsFilterPost
     *
     * Получение КТ по артикулам продавца.
     *
     */
    public function testContentV1CardsFilterPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsLimitsGet
     *
     * Лимиты по КТ.
     *
     */
    public function testContentV1CardsLimitsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsMoveNmPost
     *
     * Объединение / Разъединение НМ.
     *
     */
    public function testContentV1CardsMoveNmPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsTrashListPost
     *
     * Список НМ, находящихся в корзине.
     *
     */
    public function testContentV1CardsTrashListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsUpdatePost
     *
     * Редактирование КТ.
     *
     */
    public function testContentV1CardsUpdatePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsUploadAddPost
     *
     * Добавление НМ к КТ.
     *
     */
    public function testContentV1CardsUploadAddPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1CardsUploadPost
     *
     * Создание  КТ.
     *
     */
    public function testContentV1CardsUploadPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1DirectoryBrandsGet
     *
     * Бренд.
     *
     */
    public function testContentV1DirectoryBrandsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1DirectoryColorsGet
     *
     * Цвет.
     *
     */
    public function testContentV1DirectoryColorsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1DirectoryCountriesGet
     *
     * Страна Производства.
     *
     */
    public function testContentV1DirectoryCountriesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1DirectoryKindsGet
     *
     * Пол.
     *
     */
    public function testContentV1DirectoryKindsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1DirectorySeasonsGet
     *
     * Сезон.
     *
     */
    public function testContentV1DirectorySeasonsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1DirectoryTnvedGet
     *
     * ТНВЭД код.
     *
     */
    public function testContentV1DirectoryTnvedGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1MediaFilePost
     *
     * Добавление медиа контента в КТ.
     *
     */
    public function testContentV1MediaFilePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1MediaSavePost
     *
     * Изменение медиа контента КТ.
     *
     */
    public function testContentV1MediaSavePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1ObjectAllGet
     *
     * Категория товаров.
     *
     */
    public function testContentV1ObjectAllGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1ObjectCharacteristicsListFilterGet
     *
     * Характеристики для создания КТ по всем подкатегориям.
     *
     */
    public function testContentV1ObjectCharacteristicsListFilterGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1ObjectCharacteristicsObjectNameGet
     *
     * Характеристики для создания КТ для категории товара.
     *
     */
    public function testContentV1ObjectCharacteristicsObjectNameGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1ObjectParentAllGet
     *
     * Родительские категории товаров.
     *
     */
    public function testContentV1ObjectParentAllGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1TagIdDelete
     *
     * Удаление тега.
     *
     */
    public function testContentV1TagIdDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1TagIdPatch
     *
     * Изменение тега.
     *
     */
    public function testContentV1TagIdPatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1TagNomenclatureLinkPost
     *
     * Управление тегами в КТ.
     *
     */
    public function testContentV1TagNomenclatureLinkPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1TagPost
     *
     * Создание тега.
     *
     */
    public function testContentV1TagPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV1TagsGet
     *
     * Список тегов.
     *
     */
    public function testContentV1TagsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publicApiV1InfoGet
     *
     * Получение информации о ценах..
     *
     */
    public function testPublicApiV1InfoGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publicApiV1PricesPost
     *
     * Загрузка цен.
     *
     */
    public function testPublicApiV1PricesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publicApiV1RevokeDiscountsPost
     *
     * Сброс скидок для номенклатур.
     *
     */
    public function testPublicApiV1RevokeDiscountsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publicApiV1RevokePromocodesPost
     *
     * Сброс промокодов для номенклатур.
     *
     */
    public function testPublicApiV1RevokePromocodesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publicApiV1UpdateDiscountsPost
     *
     * Установка скидок.
     *
     */
    public function testPublicApiV1UpdateDiscountsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publicApiV1UpdatePromocodesPost
     *
     * Установка промокодов для номенклатур.
     *
     */
    public function testPublicApiV1UpdatePromocodesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
