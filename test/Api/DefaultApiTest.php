<?php
/**
 * DefaultApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Работа с товарами
 *
 * <div class=\"description_important\">       Узнать больше о работе с товарами можно в <a href=\"https://seller.wildberries.ru/instructions/category/8eeeafc6-4b7a-453d-925a-00fc56510f67?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">справочном центре</a> </div>  Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца.
 *
 * The version of the OpenAPI document: products
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for apiV2BufferGoodsTaskGet
     *
     * Детализация необработанной загрузки.
     *
     */
    public function testApiV2BufferGoodsTaskGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2BufferTasksGet
     *
     * Состояние необработанной загрузки.
     *
     */
    public function testApiV2BufferTasksGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2HistoryGoodsTaskGet
     *
     * Детализация обработанной загрузки.
     *
     */
    public function testApiV2HistoryGoodsTaskGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2HistoryTasksGet
     *
     * Состояние обработанной загрузки.
     *
     */
    public function testApiV2HistoryTasksGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2ListGoodsFilterGet
     *
     * Получить товары с ценами.
     *
     */
    public function testApiV2ListGoodsFilterGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2ListGoodsSizeNmGet
     *
     * Получить размеры товара с ценами.
     *
     */
    public function testApiV2ListGoodsSizeNmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2QuarantineGoodsGet
     *
     * Получить товары в карантине.
     *
     */
    public function testApiV2QuarantineGoodsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UploadTaskClubDiscountPost
     *
     * Установить скидки WB Клуба.
     *
     */
    public function testApiV2UploadTaskClubDiscountPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UploadTaskPost
     *
     * Установить цены и скидки.
     *
     */
    public function testApiV2UploadTaskPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV2UploadTaskSizePost
     *
     * Установить цены для размеров.
     *
     */
    public function testApiV2UploadTaskSizePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV3OfficesGet
     *
     * Получить список складов WB.
     *
     */
    public function testApiV3OfficesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV3StocksWarehouseIdDelete
     *
     * Удалить остатки товаров.
     *
     */
    public function testApiV3StocksWarehouseIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV3StocksWarehouseIdPost
     *
     * Получить остатки товаров.
     *
     */
    public function testApiV3StocksWarehouseIdPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV3StocksWarehouseIdPut
     *
     * Обновить остатки товаров.
     *
     */
    public function testApiV3StocksWarehouseIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV3WarehousesGet
     *
     * Получить список складов продавца.
     *
     */
    public function testApiV3WarehousesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV3WarehousesPost
     *
     * Создать склад продавца.
     *
     */
    public function testApiV3WarehousesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV3WarehousesWarehouseIdDelete
     *
     * Удалить склад продавца.
     *
     */
    public function testApiV3WarehousesWarehouseIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiV3WarehousesWarehouseIdPut
     *
     * Обновить склад продавца.
     *
     */
    public function testApiV3WarehousesWarehouseIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2BarcodesPost
     *
     * Генерация баркодов.
     *
     */
    public function testContentV2BarcodesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2CardsDeleteTrashPost
     *
     * Перенос карточек товаров в корзину.
     *
     */
    public function testContentV2CardsDeleteTrashPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2CardsErrorListGet
     *
     * Список несозданных карточек товаров с ошибками.
     *
     */
    public function testContentV2CardsErrorListGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2CardsLimitsGet
     *
     * Лимиты карточек товаров.
     *
     */
    public function testContentV2CardsLimitsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2CardsMoveNmPost
     *
     * Объединение и разъединение карточек товаров.
     *
     */
    public function testContentV2CardsMoveNmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2CardsRecoverPost
     *
     * Восстановление карточек товаров из корзины.
     *
     */
    public function testContentV2CardsRecoverPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2CardsUpdatePost
     *
     * Редактирование карточек товаров.
     *
     */
    public function testContentV2CardsUpdatePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2CardsUploadAddPost
     *
     * Создание карточек товаров с присоединением.
     *
     */
    public function testContentV2CardsUploadAddPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2CardsUploadPost
     *
     * Создание карточек товаров.
     *
     */
    public function testContentV2CardsUploadPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2DirectoryColorsGet
     *
     * Цвет.
     *
     */
    public function testContentV2DirectoryColorsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2DirectoryCountriesGet
     *
     * Страна производства.
     *
     */
    public function testContentV2DirectoryCountriesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2DirectoryKindsGet
     *
     * Пол.
     *
     */
    public function testContentV2DirectoryKindsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2DirectorySeasonsGet
     *
     * Сезон.
     *
     */
    public function testContentV2DirectorySeasonsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2DirectoryTnvedGet
     *
     * ТНВЭД-код.
     *
     */
    public function testContentV2DirectoryTnvedGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2DirectoryVatGet
     *
     * Ставка НДС.
     *
     */
    public function testContentV2DirectoryVatGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2GetCardsListPost
     *
     * Список карточек товаров.
     *
     */
    public function testContentV2GetCardsListPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2GetCardsTrashPost
     *
     * Список карточек товаров в корзине.
     *
     */
    public function testContentV2GetCardsTrashPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2ObjectAllGet
     *
     * Список предметов.
     *
     */
    public function testContentV2ObjectAllGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2ObjectCharcsSubjectIdGet
     *
     * Характеристики предмета.
     *
     */
    public function testContentV2ObjectCharcsSubjectIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2ObjectParentAllGet
     *
     * Родительские категории товаров.
     *
     */
    public function testContentV2ObjectParentAllGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2TagIdDelete
     *
     * Удаление ярлыка.
     *
     */
    public function testContentV2TagIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2TagIdPatch
     *
     * Изменение ярлыка.
     *
     */
    public function testContentV2TagIdPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2TagNomenclatureLinkPost
     *
     * Управление ярлыками в карточке товара.
     *
     */
    public function testContentV2TagNomenclatureLinkPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2TagPost
     *
     * Создание ярлыка.
     *
     */
    public function testContentV2TagPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV2TagsGet
     *
     * Список ярлыков.
     *
     */
    public function testContentV2TagsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV3MediaFilePost
     *
     * Загрузить медиафайл.
     *
     */
    public function testContentV3MediaFilePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for contentV3MediaSavePost
     *
     * Загрузить медиафайлы по ссылкам.
     *
     */
    public function testContentV3MediaSavePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
