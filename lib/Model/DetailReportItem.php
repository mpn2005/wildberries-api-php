<?php
/**
 * DetailReportItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API продавца
 *
 * # Общее описание <style> .langChange {   text-align: left;   padding: 2px 222px 2px 18px; } </style> <style> .new {   display: inline-block;   padding: 2px 8px;   margin: 0;   background-color: #ffa500;   color: #ffffff;   font-size: 13px;   vertical-align: middle;   line-height: 1.6;   border-radius: 4px;   font-weight: 600;   font-size: 12px; } </style> <style> .newM {   padding: 5px 10px;   display: inline-block;   background-color: #ffa500;   color: #ffffff;   cursor: pointer;   text-align: center;   outline: none;   margin: 0 5px 5px 5px;   #border: 1px solid #07090b;   border-radius: 5px;   min-width: 60px;   font-size: 0.9em;   font-weight: bold; } </style>  Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной провеПродвижение /и API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul> <br>  ## Поддержка Техническая поддержка осуществляется через диалоги в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> <br> <br>  ## Авторизация Авторизация осуществляется по токенам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к API](https://seller.wildberries.ru/supplier-settings/access-to-api).   <br>  <br>  Существует три типа токенов:   <ol>     <li>Стандартный. Используется для работы с методами из разделов: Цены, Промокоды и скидки, Контент, Marketplace, Рекомендации, Отзывы, Вопросы.</li>     <li>Статистика. Используется для работы с методами из раздела Статистика.</li>     <li>Продвижение. Используется для работы с методами из раздела Продвижение.</li>   </ol>    Обратите внимание, что токен отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный токен следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. <br> <br> Обращаем ваше внимание, что интеграции с Порталом Продавца, не использующие Публичное API, противоречат пункту 9.7.6 оферты. <br> Тем не менее, при отсутствии прямой угрозы утечки данных из личного кабинета продавца Wildberries заранее уведомит продавца о запланированной блокировке, связанной с этим пунктом, давая возможность отключить интеграцию. <br> <br> <br> ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul> <br> ## Release Notes <p>Для просмотра обновлений перейдите по <span><a href=\"./releasenotes/index.html\" target=\"_blank\">ссылке</a></span>.</p>
 *
 * The version of the OpenAPI document: 2.16
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DetailReportItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DetailReportItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DetailReportItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'realizationreport_id' => 'int',
        'date_from' => '\DateTime',
        'date_to' => '\DateTime',
        'create_dt' => '\DateTime',
        'currency_name' => 'string',
        'suppliercontract_code' => 'object',
        'rrd_id' => 'int',
        'gi_id' => 'int',
        'subject_name' => 'string',
        'nm_id' => 'int',
        'brand_name' => 'string',
        'sa_name' => 'string',
        'ts_name' => 'string',
        'barcode' => 'string',
        'doc_type_name' => 'string',
        'quantity' => 'int',
        'retail_price' => 'float',
        'retail_amount' => 'float',
        'sale_percent' => 'int',
        'commission_percent' => 'float',
        'office_name' => 'string',
        'supplier_oper_name' => 'string',
        'order_dt' => '\DateTime',
        'sale_dt' => '\DateTime',
        'rr_dt' => '\DateTime',
        'shk_id' => 'int',
        'retail_price_withdisc_rub' => 'float',
        'delivery_amount' => 'int',
        'return_amount' => 'int',
        'delivery_rub' => 'float',
        'gi_box_type_name' => 'string',
        'product_discount_for_report' => 'float',
        'supplier_promo' => 'float',
        'rid' => 'int',
        'ppvz_spp_prc' => 'float',
        'ppvz_kvw_prc_base' => 'float',
        'ppvz_kvw_prc' => 'float',
        'sup_rating_prc_up' => 'float',
        'is_kgvp_v2' => 'float',
        'ppvz_sales_commission' => 'float',
        'ppvz_for_pay' => 'float',
        'ppvz_reward' => 'float',
        'acquiring_fee' => 'float',
        'acquiring_bank' => 'string',
        'ppvz_vw' => 'float',
        'ppvz_vw_nds' => 'float',
        'ppvz_office_id' => 'int',
        'ppvz_office_name' => 'string',
        'ppvz_supplier_id' => 'int',
        'ppvz_supplier_name' => 'string',
        'ppvz_inn' => 'string',
        'declaration_number' => 'string',
        'bonus_type_name' => 'string',
        'sticker_id' => 'string',
        'site_country' => 'string',
        'penalty' => 'float',
        'additional_payment' => 'float',
        'rebill_logistic_cost' => 'float',
        'rebill_logistic_org' => 'string',
        'kiz' => 'string',
        'srid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'realizationreport_id' => null,
        'date_from' => 'date-time',
        'date_to' => 'date-time',
        'create_dt' => 'date-time',
        'currency_name' => null,
        'suppliercontract_code' => null,
        'rrd_id' => null,
        'gi_id' => null,
        'subject_name' => null,
        'nm_id' => null,
        'brand_name' => null,
        'sa_name' => null,
        'ts_name' => null,
        'barcode' => null,
        'doc_type_name' => null,
        'quantity' => null,
        'retail_price' => null,
        'retail_amount' => null,
        'sale_percent' => null,
        'commission_percent' => null,
        'office_name' => null,
        'supplier_oper_name' => null,
        'order_dt' => 'date-time',
        'sale_dt' => 'date-time',
        'rr_dt' => 'date-time',
        'shk_id' => null,
        'retail_price_withdisc_rub' => null,
        'delivery_amount' => null,
        'return_amount' => null,
        'delivery_rub' => null,
        'gi_box_type_name' => null,
        'product_discount_for_report' => null,
        'supplier_promo' => null,
        'rid' => null,
        'ppvz_spp_prc' => null,
        'ppvz_kvw_prc_base' => null,
        'ppvz_kvw_prc' => null,
        'sup_rating_prc_up' => null,
        'is_kgvp_v2' => null,
        'ppvz_sales_commission' => null,
        'ppvz_for_pay' => null,
        'ppvz_reward' => null,
        'acquiring_fee' => null,
        'acquiring_bank' => null,
        'ppvz_vw' => null,
        'ppvz_vw_nds' => null,
        'ppvz_office_id' => null,
        'ppvz_office_name' => null,
        'ppvz_supplier_id' => null,
        'ppvz_supplier_name' => null,
        'ppvz_inn' => null,
        'declaration_number' => null,
        'bonus_type_name' => null,
        'sticker_id' => null,
        'site_country' => null,
        'penalty' => null,
        'additional_payment' => null,
        'rebill_logistic_cost' => null,
        'rebill_logistic_org' => null,
        'kiz' => null,
        'srid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'realizationreport_id' => false,
		'date_from' => false,
		'date_to' => false,
		'create_dt' => false,
		'currency_name' => false,
		'suppliercontract_code' => false,
		'rrd_id' => false,
		'gi_id' => false,
		'subject_name' => false,
		'nm_id' => false,
		'brand_name' => false,
		'sa_name' => false,
		'ts_name' => false,
		'barcode' => false,
		'doc_type_name' => false,
		'quantity' => false,
		'retail_price' => false,
		'retail_amount' => false,
		'sale_percent' => false,
		'commission_percent' => false,
		'office_name' => false,
		'supplier_oper_name' => false,
		'order_dt' => false,
		'sale_dt' => false,
		'rr_dt' => false,
		'shk_id' => false,
		'retail_price_withdisc_rub' => false,
		'delivery_amount' => false,
		'return_amount' => false,
		'delivery_rub' => false,
		'gi_box_type_name' => false,
		'product_discount_for_report' => false,
		'supplier_promo' => false,
		'rid' => false,
		'ppvz_spp_prc' => false,
		'ppvz_kvw_prc_base' => false,
		'ppvz_kvw_prc' => false,
		'sup_rating_prc_up' => false,
		'is_kgvp_v2' => false,
		'ppvz_sales_commission' => false,
		'ppvz_for_pay' => false,
		'ppvz_reward' => false,
		'acquiring_fee' => false,
		'acquiring_bank' => false,
		'ppvz_vw' => false,
		'ppvz_vw_nds' => false,
		'ppvz_office_id' => false,
		'ppvz_office_name' => false,
		'ppvz_supplier_id' => false,
		'ppvz_supplier_name' => false,
		'ppvz_inn' => false,
		'declaration_number' => false,
		'bonus_type_name' => false,
		'sticker_id' => false,
		'site_country' => false,
		'penalty' => false,
		'additional_payment' => false,
		'rebill_logistic_cost' => false,
		'rebill_logistic_org' => false,
		'kiz' => false,
		'srid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'realizationreport_id' => 'realizationreport_id',
        'date_from' => 'date_from',
        'date_to' => 'date_to',
        'create_dt' => 'create_dt',
        'currency_name' => 'currency_name',
        'suppliercontract_code' => 'suppliercontract_code',
        'rrd_id' => 'rrd_id',
        'gi_id' => 'gi_id',
        'subject_name' => 'subject_name',
        'nm_id' => 'nm_id',
        'brand_name' => 'brand_name',
        'sa_name' => 'sa_name',
        'ts_name' => 'ts_name',
        'barcode' => 'barcode',
        'doc_type_name' => 'doc_type_name',
        'quantity' => 'quantity',
        'retail_price' => 'retail_price',
        'retail_amount' => 'retail_amount',
        'sale_percent' => 'sale_percent',
        'commission_percent' => 'commission_percent',
        'office_name' => 'office_name',
        'supplier_oper_name' => 'supplier_oper_name',
        'order_dt' => 'order_dt',
        'sale_dt' => 'sale_dt',
        'rr_dt' => 'rr_dt',
        'shk_id' => 'shk_id',
        'retail_price_withdisc_rub' => 'retail_price_withdisc_rub',
        'delivery_amount' => 'delivery_amount',
        'return_amount' => 'return_amount',
        'delivery_rub' => 'delivery_rub',
        'gi_box_type_name' => 'gi_box_type_name',
        'product_discount_for_report' => 'product_discount_for_report',
        'supplier_promo' => 'supplier_promo',
        'rid' => 'rid',
        'ppvz_spp_prc' => 'ppvz_spp_prc',
        'ppvz_kvw_prc_base' => 'ppvz_kvw_prc_base',
        'ppvz_kvw_prc' => 'ppvz_kvw_prc',
        'sup_rating_prc_up' => 'sup_rating_prc_up',
        'is_kgvp_v2' => 'is_kgvp_v2',
        'ppvz_sales_commission' => 'ppvz_sales_commission',
        'ppvz_for_pay' => 'ppvz_for_pay',
        'ppvz_reward' => 'ppvz_reward',
        'acquiring_fee' => 'acquiring_fee',
        'acquiring_bank' => 'acquiring_bank',
        'ppvz_vw' => 'ppvz_vw',
        'ppvz_vw_nds' => 'ppvz_vw_nds',
        'ppvz_office_id' => 'ppvz_office_id',
        'ppvz_office_name' => 'ppvz_office_name',
        'ppvz_supplier_id' => 'ppvz_supplier_id',
        'ppvz_supplier_name' => 'ppvz_supplier_name',
        'ppvz_inn' => 'ppvz_inn',
        'declaration_number' => 'declaration_number',
        'bonus_type_name' => 'bonus_type_name',
        'sticker_id' => 'sticker_id',
        'site_country' => 'site_country',
        'penalty' => 'penalty',
        'additional_payment' => 'additional_payment',
        'rebill_logistic_cost' => 'rebill_logistic_cost',
        'rebill_logistic_org' => 'rebill_logistic_org',
        'kiz' => 'kiz',
        'srid' => 'srid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'realizationreport_id' => 'setRealizationreportId',
        'date_from' => 'setDateFrom',
        'date_to' => 'setDateTo',
        'create_dt' => 'setCreateDt',
        'currency_name' => 'setCurrencyName',
        'suppliercontract_code' => 'setSuppliercontractCode',
        'rrd_id' => 'setRrdId',
        'gi_id' => 'setGiId',
        'subject_name' => 'setSubjectName',
        'nm_id' => 'setNmId',
        'brand_name' => 'setBrandName',
        'sa_name' => 'setSaName',
        'ts_name' => 'setTsName',
        'barcode' => 'setBarcode',
        'doc_type_name' => 'setDocTypeName',
        'quantity' => 'setQuantity',
        'retail_price' => 'setRetailPrice',
        'retail_amount' => 'setRetailAmount',
        'sale_percent' => 'setSalePercent',
        'commission_percent' => 'setCommissionPercent',
        'office_name' => 'setOfficeName',
        'supplier_oper_name' => 'setSupplierOperName',
        'order_dt' => 'setOrderDt',
        'sale_dt' => 'setSaleDt',
        'rr_dt' => 'setRrDt',
        'shk_id' => 'setShkId',
        'retail_price_withdisc_rub' => 'setRetailPriceWithdiscRub',
        'delivery_amount' => 'setDeliveryAmount',
        'return_amount' => 'setReturnAmount',
        'delivery_rub' => 'setDeliveryRub',
        'gi_box_type_name' => 'setGiBoxTypeName',
        'product_discount_for_report' => 'setProductDiscountForReport',
        'supplier_promo' => 'setSupplierPromo',
        'rid' => 'setRid',
        'ppvz_spp_prc' => 'setPpvzSppPrc',
        'ppvz_kvw_prc_base' => 'setPpvzKvwPrcBase',
        'ppvz_kvw_prc' => 'setPpvzKvwPrc',
        'sup_rating_prc_up' => 'setSupRatingPrcUp',
        'is_kgvp_v2' => 'setIsKgvpV2',
        'ppvz_sales_commission' => 'setPpvzSalesCommission',
        'ppvz_for_pay' => 'setPpvzForPay',
        'ppvz_reward' => 'setPpvzReward',
        'acquiring_fee' => 'setAcquiringFee',
        'acquiring_bank' => 'setAcquiringBank',
        'ppvz_vw' => 'setPpvzVw',
        'ppvz_vw_nds' => 'setPpvzVwNds',
        'ppvz_office_id' => 'setPpvzOfficeId',
        'ppvz_office_name' => 'setPpvzOfficeName',
        'ppvz_supplier_id' => 'setPpvzSupplierId',
        'ppvz_supplier_name' => 'setPpvzSupplierName',
        'ppvz_inn' => 'setPpvzInn',
        'declaration_number' => 'setDeclarationNumber',
        'bonus_type_name' => 'setBonusTypeName',
        'sticker_id' => 'setStickerId',
        'site_country' => 'setSiteCountry',
        'penalty' => 'setPenalty',
        'additional_payment' => 'setAdditionalPayment',
        'rebill_logistic_cost' => 'setRebillLogisticCost',
        'rebill_logistic_org' => 'setRebillLogisticOrg',
        'kiz' => 'setKiz',
        'srid' => 'setSrid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'realizationreport_id' => 'getRealizationreportId',
        'date_from' => 'getDateFrom',
        'date_to' => 'getDateTo',
        'create_dt' => 'getCreateDt',
        'currency_name' => 'getCurrencyName',
        'suppliercontract_code' => 'getSuppliercontractCode',
        'rrd_id' => 'getRrdId',
        'gi_id' => 'getGiId',
        'subject_name' => 'getSubjectName',
        'nm_id' => 'getNmId',
        'brand_name' => 'getBrandName',
        'sa_name' => 'getSaName',
        'ts_name' => 'getTsName',
        'barcode' => 'getBarcode',
        'doc_type_name' => 'getDocTypeName',
        'quantity' => 'getQuantity',
        'retail_price' => 'getRetailPrice',
        'retail_amount' => 'getRetailAmount',
        'sale_percent' => 'getSalePercent',
        'commission_percent' => 'getCommissionPercent',
        'office_name' => 'getOfficeName',
        'supplier_oper_name' => 'getSupplierOperName',
        'order_dt' => 'getOrderDt',
        'sale_dt' => 'getSaleDt',
        'rr_dt' => 'getRrDt',
        'shk_id' => 'getShkId',
        'retail_price_withdisc_rub' => 'getRetailPriceWithdiscRub',
        'delivery_amount' => 'getDeliveryAmount',
        'return_amount' => 'getReturnAmount',
        'delivery_rub' => 'getDeliveryRub',
        'gi_box_type_name' => 'getGiBoxTypeName',
        'product_discount_for_report' => 'getProductDiscountForReport',
        'supplier_promo' => 'getSupplierPromo',
        'rid' => 'getRid',
        'ppvz_spp_prc' => 'getPpvzSppPrc',
        'ppvz_kvw_prc_base' => 'getPpvzKvwPrcBase',
        'ppvz_kvw_prc' => 'getPpvzKvwPrc',
        'sup_rating_prc_up' => 'getSupRatingPrcUp',
        'is_kgvp_v2' => 'getIsKgvpV2',
        'ppvz_sales_commission' => 'getPpvzSalesCommission',
        'ppvz_for_pay' => 'getPpvzForPay',
        'ppvz_reward' => 'getPpvzReward',
        'acquiring_fee' => 'getAcquiringFee',
        'acquiring_bank' => 'getAcquiringBank',
        'ppvz_vw' => 'getPpvzVw',
        'ppvz_vw_nds' => 'getPpvzVwNds',
        'ppvz_office_id' => 'getPpvzOfficeId',
        'ppvz_office_name' => 'getPpvzOfficeName',
        'ppvz_supplier_id' => 'getPpvzSupplierId',
        'ppvz_supplier_name' => 'getPpvzSupplierName',
        'ppvz_inn' => 'getPpvzInn',
        'declaration_number' => 'getDeclarationNumber',
        'bonus_type_name' => 'getBonusTypeName',
        'sticker_id' => 'getStickerId',
        'site_country' => 'getSiteCountry',
        'penalty' => 'getPenalty',
        'additional_payment' => 'getAdditionalPayment',
        'rebill_logistic_cost' => 'getRebillLogisticCost',
        'rebill_logistic_org' => 'getRebillLogisticOrg',
        'kiz' => 'getKiz',
        'srid' => 'getSrid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('realizationreport_id', $data ?? [], null);
        $this->setIfExists('date_from', $data ?? [], null);
        $this->setIfExists('date_to', $data ?? [], null);
        $this->setIfExists('create_dt', $data ?? [], null);
        $this->setIfExists('currency_name', $data ?? [], null);
        $this->setIfExists('suppliercontract_code', $data ?? [], null);
        $this->setIfExists('rrd_id', $data ?? [], null);
        $this->setIfExists('gi_id', $data ?? [], null);
        $this->setIfExists('subject_name', $data ?? [], null);
        $this->setIfExists('nm_id', $data ?? [], null);
        $this->setIfExists('brand_name', $data ?? [], null);
        $this->setIfExists('sa_name', $data ?? [], null);
        $this->setIfExists('ts_name', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('doc_type_name', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('retail_price', $data ?? [], null);
        $this->setIfExists('retail_amount', $data ?? [], null);
        $this->setIfExists('sale_percent', $data ?? [], null);
        $this->setIfExists('commission_percent', $data ?? [], null);
        $this->setIfExists('office_name', $data ?? [], null);
        $this->setIfExists('supplier_oper_name', $data ?? [], null);
        $this->setIfExists('order_dt', $data ?? [], null);
        $this->setIfExists('sale_dt', $data ?? [], null);
        $this->setIfExists('rr_dt', $data ?? [], null);
        $this->setIfExists('shk_id', $data ?? [], null);
        $this->setIfExists('retail_price_withdisc_rub', $data ?? [], null);
        $this->setIfExists('delivery_amount', $data ?? [], null);
        $this->setIfExists('return_amount', $data ?? [], null);
        $this->setIfExists('delivery_rub', $data ?? [], null);
        $this->setIfExists('gi_box_type_name', $data ?? [], null);
        $this->setIfExists('product_discount_for_report', $data ?? [], null);
        $this->setIfExists('supplier_promo', $data ?? [], null);
        $this->setIfExists('rid', $data ?? [], null);
        $this->setIfExists('ppvz_spp_prc', $data ?? [], null);
        $this->setIfExists('ppvz_kvw_prc_base', $data ?? [], null);
        $this->setIfExists('ppvz_kvw_prc', $data ?? [], null);
        $this->setIfExists('sup_rating_prc_up', $data ?? [], null);
        $this->setIfExists('is_kgvp_v2', $data ?? [], null);
        $this->setIfExists('ppvz_sales_commission', $data ?? [], null);
        $this->setIfExists('ppvz_for_pay', $data ?? [], null);
        $this->setIfExists('ppvz_reward', $data ?? [], null);
        $this->setIfExists('acquiring_fee', $data ?? [], null);
        $this->setIfExists('acquiring_bank', $data ?? [], null);
        $this->setIfExists('ppvz_vw', $data ?? [], null);
        $this->setIfExists('ppvz_vw_nds', $data ?? [], null);
        $this->setIfExists('ppvz_office_id', $data ?? [], null);
        $this->setIfExists('ppvz_office_name', $data ?? [], null);
        $this->setIfExists('ppvz_supplier_id', $data ?? [], null);
        $this->setIfExists('ppvz_supplier_name', $data ?? [], null);
        $this->setIfExists('ppvz_inn', $data ?? [], null);
        $this->setIfExists('declaration_number', $data ?? [], null);
        $this->setIfExists('bonus_type_name', $data ?? [], null);
        $this->setIfExists('sticker_id', $data ?? [], null);
        $this->setIfExists('site_country', $data ?? [], null);
        $this->setIfExists('penalty', $data ?? [], null);
        $this->setIfExists('additional_payment', $data ?? [], null);
        $this->setIfExists('rebill_logistic_cost', $data ?? [], null);
        $this->setIfExists('rebill_logistic_org', $data ?? [], null);
        $this->setIfExists('kiz', $data ?? [], null);
        $this->setIfExists('srid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets realizationreport_id
     *
     * @return int|null
     */
    public function getRealizationreportId()
    {
        return $this->container['realizationreport_id'];
    }

    /**
     * Sets realizationreport_id
     *
     * @param int|null $realizationreport_id Номер отчёта
     *
     * @return self
     */
    public function setRealizationreportId($realizationreport_id)
    {
        if (is_null($realizationreport_id)) {
            throw new \InvalidArgumentException('non-nullable realizationreport_id cannot be null');
        }
        $this->container['realizationreport_id'] = $realizationreport_id;

        return $this;
    }

    /**
     * Gets date_from
     *
     * @return \DateTime|null
     */
    public function getDateFrom()
    {
        return $this->container['date_from'];
    }

    /**
     * Sets date_from
     *
     * @param \DateTime|null $date_from Дата начала отчётного периода
     *
     * @return self
     */
    public function setDateFrom($date_from)
    {
        if (is_null($date_from)) {
            throw new \InvalidArgumentException('non-nullable date_from cannot be null');
        }
        $this->container['date_from'] = $date_from;

        return $this;
    }

    /**
     * Gets date_to
     *
     * @return \DateTime|null
     */
    public function getDateTo()
    {
        return $this->container['date_to'];
    }

    /**
     * Sets date_to
     *
     * @param \DateTime|null $date_to Дата конца отчётного периода
     *
     * @return self
     */
    public function setDateTo($date_to)
    {
        if (is_null($date_to)) {
            throw new \InvalidArgumentException('non-nullable date_to cannot be null');
        }
        $this->container['date_to'] = $date_to;

        return $this;
    }

    /**
     * Gets create_dt
     *
     * @return \DateTime|null
     */
    public function getCreateDt()
    {
        return $this->container['create_dt'];
    }

    /**
     * Sets create_dt
     *
     * @param \DateTime|null $create_dt Дата формирования отчёта
     *
     * @return self
     */
    public function setCreateDt($create_dt)
    {
        if (is_null($create_dt)) {
            throw new \InvalidArgumentException('non-nullable create_dt cannot be null');
        }
        $this->container['create_dt'] = $create_dt;

        return $this;
    }

    /**
     * Gets currency_name
     *
     * @return string|null
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     *
     * @param string|null $currency_name Валюта отчёта  <span class=\"new\">new</span>
     *
     * @return self
     */
    public function setCurrencyName($currency_name)
    {
        if (is_null($currency_name)) {
            throw new \InvalidArgumentException('non-nullable currency_name cannot be null');
        }
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets suppliercontract_code
     *
     * @return object|null
     */
    public function getSuppliercontractCode()
    {
        return $this->container['suppliercontract_code'];
    }

    /**
     * Sets suppliercontract_code
     *
     * @param object|null $suppliercontract_code Договор
     *
     * @return self
     */
    public function setSuppliercontractCode($suppliercontract_code)
    {
        if (is_null($suppliercontract_code)) {
            throw new \InvalidArgumentException('non-nullable suppliercontract_code cannot be null');
        }
        $this->container['suppliercontract_code'] = $suppliercontract_code;

        return $this;
    }

    /**
     * Gets rrd_id
     *
     * @return int|null
     */
    public function getRrdId()
    {
        return $this->container['rrd_id'];
    }

    /**
     * Sets rrd_id
     *
     * @param int|null $rrd_id Номер строки
     *
     * @return self
     */
    public function setRrdId($rrd_id)
    {
        if (is_null($rrd_id)) {
            throw new \InvalidArgumentException('non-nullable rrd_id cannot be null');
        }
        $this->container['rrd_id'] = $rrd_id;

        return $this;
    }

    /**
     * Gets gi_id
     *
     * @return int|null
     */
    public function getGiId()
    {
        return $this->container['gi_id'];
    }

    /**
     * Sets gi_id
     *
     * @param int|null $gi_id Номер поставки
     *
     * @return self
     */
    public function setGiId($gi_id)
    {
        if (is_null($gi_id)) {
            throw new \InvalidArgumentException('non-nullable gi_id cannot be null');
        }
        $this->container['gi_id'] = $gi_id;

        return $this;
    }

    /**
     * Gets subject_name
     *
     * @return string|null
     */
    public function getSubjectName()
    {
        return $this->container['subject_name'];
    }

    /**
     * Sets subject_name
     *
     * @param string|null $subject_name Предмет
     *
     * @return self
     */
    public function setSubjectName($subject_name)
    {
        if (is_null($subject_name)) {
            throw new \InvalidArgumentException('non-nullable subject_name cannot be null');
        }
        $this->container['subject_name'] = $subject_name;

        return $this;
    }

    /**
     * Gets nm_id
     *
     * @return int|null
     */
    public function getNmId()
    {
        return $this->container['nm_id'];
    }

    /**
     * Sets nm_id
     *
     * @param int|null $nm_id Артикул WB
     *
     * @return self
     */
    public function setNmId($nm_id)
    {
        if (is_null($nm_id)) {
            throw new \InvalidArgumentException('non-nullable nm_id cannot be null');
        }
        $this->container['nm_id'] = $nm_id;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name Бренд
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        if (is_null($brand_name)) {
            throw new \InvalidArgumentException('non-nullable brand_name cannot be null');
        }
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets sa_name
     *
     * @return string|null
     */
    public function getSaName()
    {
        return $this->container['sa_name'];
    }

    /**
     * Sets sa_name
     *
     * @param string|null $sa_name Артикул продавца
     *
     * @return self
     */
    public function setSaName($sa_name)
    {
        if (is_null($sa_name)) {
            throw new \InvalidArgumentException('non-nullable sa_name cannot be null');
        }
        $this->container['sa_name'] = $sa_name;

        return $this;
    }

    /**
     * Gets ts_name
     *
     * @return string|null
     */
    public function getTsName()
    {
        return $this->container['ts_name'];
    }

    /**
     * Sets ts_name
     *
     * @param string|null $ts_name Размер
     *
     * @return self
     */
    public function setTsName($ts_name)
    {
        if (is_null($ts_name)) {
            throw new \InvalidArgumentException('non-nullable ts_name cannot be null');
        }
        $this->container['ts_name'] = $ts_name;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode Баркод
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets doc_type_name
     *
     * @return string|null
     */
    public function getDocTypeName()
    {
        return $this->container['doc_type_name'];
    }

    /**
     * Sets doc_type_name
     *
     * @param string|null $doc_type_name Тип документа
     *
     * @return self
     */
    public function setDocTypeName($doc_type_name)
    {
        if (is_null($doc_type_name)) {
            throw new \InvalidArgumentException('non-nullable doc_type_name cannot be null');
        }
        $this->container['doc_type_name'] = $doc_type_name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Количество
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets retail_price
     *
     * @return float|null
     */
    public function getRetailPrice()
    {
        return $this->container['retail_price'];
    }

    /**
     * Sets retail_price
     *
     * @param float|null $retail_price Цена розничная
     *
     * @return self
     */
    public function setRetailPrice($retail_price)
    {
        if (is_null($retail_price)) {
            throw new \InvalidArgumentException('non-nullable retail_price cannot be null');
        }
        $this->container['retail_price'] = $retail_price;

        return $this;
    }

    /**
     * Gets retail_amount
     *
     * @return float|null
     */
    public function getRetailAmount()
    {
        return $this->container['retail_amount'];
    }

    /**
     * Sets retail_amount
     *
     * @param float|null $retail_amount Сумма продаж (возвратов)
     *
     * @return self
     */
    public function setRetailAmount($retail_amount)
    {
        if (is_null($retail_amount)) {
            throw new \InvalidArgumentException('non-nullable retail_amount cannot be null');
        }
        $this->container['retail_amount'] = $retail_amount;

        return $this;
    }

    /**
     * Gets sale_percent
     *
     * @return int|null
     */
    public function getSalePercent()
    {
        return $this->container['sale_percent'];
    }

    /**
     * Sets sale_percent
     *
     * @param int|null $sale_percent Согласованная скидка
     *
     * @return self
     */
    public function setSalePercent($sale_percent)
    {
        if (is_null($sale_percent)) {
            throw new \InvalidArgumentException('non-nullable sale_percent cannot be null');
        }
        $this->container['sale_percent'] = $sale_percent;

        return $this;
    }

    /**
     * Gets commission_percent
     *
     * @return float|null
     */
    public function getCommissionPercent()
    {
        return $this->container['commission_percent'];
    }

    /**
     * Sets commission_percent
     *
     * @param float|null $commission_percent Процент комиссии
     *
     * @return self
     */
    public function setCommissionPercent($commission_percent)
    {
        if (is_null($commission_percent)) {
            throw new \InvalidArgumentException('non-nullable commission_percent cannot be null');
        }
        $this->container['commission_percent'] = $commission_percent;

        return $this;
    }

    /**
     * Gets office_name
     *
     * @return string|null
     */
    public function getOfficeName()
    {
        return $this->container['office_name'];
    }

    /**
     * Sets office_name
     *
     * @param string|null $office_name Склад
     *
     * @return self
     */
    public function setOfficeName($office_name)
    {
        if (is_null($office_name)) {
            throw new \InvalidArgumentException('non-nullable office_name cannot be null');
        }
        $this->container['office_name'] = $office_name;

        return $this;
    }

    /**
     * Gets supplier_oper_name
     *
     * @return string|null
     */
    public function getSupplierOperName()
    {
        return $this->container['supplier_oper_name'];
    }

    /**
     * Sets supplier_oper_name
     *
     * @param string|null $supplier_oper_name Обоснование для оплаты
     *
     * @return self
     */
    public function setSupplierOperName($supplier_oper_name)
    {
        if (is_null($supplier_oper_name)) {
            throw new \InvalidArgumentException('non-nullable supplier_oper_name cannot be null');
        }
        $this->container['supplier_oper_name'] = $supplier_oper_name;

        return $this;
    }

    /**
     * Gets order_dt
     *
     * @return \DateTime|null
     */
    public function getOrderDt()
    {
        return $this->container['order_dt'];
    }

    /**
     * Sets order_dt
     *
     * @param \DateTime|null $order_dt Дата заказа. <br> Присылается с явным указанием часового пояса
     *
     * @return self
     */
    public function setOrderDt($order_dt)
    {
        if (is_null($order_dt)) {
            throw new \InvalidArgumentException('non-nullable order_dt cannot be null');
        }
        $this->container['order_dt'] = $order_dt;

        return $this;
    }

    /**
     * Gets sale_dt
     *
     * @return \DateTime|null
     */
    public function getSaleDt()
    {
        return $this->container['sale_dt'];
    }

    /**
     * Sets sale_dt
     *
     * @param \DateTime|null $sale_dt Дата продажи. <br> Присылается с явным указанием часового пояса
     *
     * @return self
     */
    public function setSaleDt($sale_dt)
    {
        if (is_null($sale_dt)) {
            throw new \InvalidArgumentException('non-nullable sale_dt cannot be null');
        }
        $this->container['sale_dt'] = $sale_dt;

        return $this;
    }

    /**
     * Gets rr_dt
     *
     * @return \DateTime|null
     */
    public function getRrDt()
    {
        return $this->container['rr_dt'];
    }

    /**
     * Sets rr_dt
     *
     * @param \DateTime|null $rr_dt Дата операции. <br> Присылается с явным указанием часового пояса
     *
     * @return self
     */
    public function setRrDt($rr_dt)
    {
        if (is_null($rr_dt)) {
            throw new \InvalidArgumentException('non-nullable rr_dt cannot be null');
        }
        $this->container['rr_dt'] = $rr_dt;

        return $this;
    }

    /**
     * Gets shk_id
     *
     * @return int|null
     */
    public function getShkId()
    {
        return $this->container['shk_id'];
    }

    /**
     * Sets shk_id
     *
     * @param int|null $shk_id Штрих-код
     *
     * @return self
     */
    public function setShkId($shk_id)
    {
        if (is_null($shk_id)) {
            throw new \InvalidArgumentException('non-nullable shk_id cannot be null');
        }
        $this->container['shk_id'] = $shk_id;

        return $this;
    }

    /**
     * Gets retail_price_withdisc_rub
     *
     * @return float|null
     */
    public function getRetailPriceWithdiscRub()
    {
        return $this->container['retail_price_withdisc_rub'];
    }

    /**
     * Sets retail_price_withdisc_rub
     *
     * @param float|null $retail_price_withdisc_rub Цена розничная с учетом согласованной скидки
     *
     * @return self
     */
    public function setRetailPriceWithdiscRub($retail_price_withdisc_rub)
    {
        if (is_null($retail_price_withdisc_rub)) {
            throw new \InvalidArgumentException('non-nullable retail_price_withdisc_rub cannot be null');
        }
        $this->container['retail_price_withdisc_rub'] = $retail_price_withdisc_rub;

        return $this;
    }

    /**
     * Gets delivery_amount
     *
     * @return int|null
     */
    public function getDeliveryAmount()
    {
        return $this->container['delivery_amount'];
    }

    /**
     * Sets delivery_amount
     *
     * @param int|null $delivery_amount Количество доставок
     *
     * @return self
     */
    public function setDeliveryAmount($delivery_amount)
    {
        if (is_null($delivery_amount)) {
            throw new \InvalidArgumentException('non-nullable delivery_amount cannot be null');
        }
        $this->container['delivery_amount'] = $delivery_amount;

        return $this;
    }

    /**
     * Gets return_amount
     *
     * @return int|null
     */
    public function getReturnAmount()
    {
        return $this->container['return_amount'];
    }

    /**
     * Sets return_amount
     *
     * @param int|null $return_amount Количество возвратов
     *
     * @return self
     */
    public function setReturnAmount($return_amount)
    {
        if (is_null($return_amount)) {
            throw new \InvalidArgumentException('non-nullable return_amount cannot be null');
        }
        $this->container['return_amount'] = $return_amount;

        return $this;
    }

    /**
     * Gets delivery_rub
     *
     * @return float|null
     */
    public function getDeliveryRub()
    {
        return $this->container['delivery_rub'];
    }

    /**
     * Sets delivery_rub
     *
     * @param float|null $delivery_rub Стоимость логистики
     *
     * @return self
     */
    public function setDeliveryRub($delivery_rub)
    {
        if (is_null($delivery_rub)) {
            throw new \InvalidArgumentException('non-nullable delivery_rub cannot be null');
        }
        $this->container['delivery_rub'] = $delivery_rub;

        return $this;
    }

    /**
     * Gets gi_box_type_name
     *
     * @return string|null
     */
    public function getGiBoxTypeName()
    {
        return $this->container['gi_box_type_name'];
    }

    /**
     * Sets gi_box_type_name
     *
     * @param string|null $gi_box_type_name Тип коробов
     *
     * @return self
     */
    public function setGiBoxTypeName($gi_box_type_name)
    {
        if (is_null($gi_box_type_name)) {
            throw new \InvalidArgumentException('non-nullable gi_box_type_name cannot be null');
        }
        $this->container['gi_box_type_name'] = $gi_box_type_name;

        return $this;
    }

    /**
     * Gets product_discount_for_report
     *
     * @return float|null
     */
    public function getProductDiscountForReport()
    {
        return $this->container['product_discount_for_report'];
    }

    /**
     * Sets product_discount_for_report
     *
     * @param float|null $product_discount_for_report Согласованный продуктовый дисконт
     *
     * @return self
     */
    public function setProductDiscountForReport($product_discount_for_report)
    {
        if (is_null($product_discount_for_report)) {
            throw new \InvalidArgumentException('non-nullable product_discount_for_report cannot be null');
        }
        $this->container['product_discount_for_report'] = $product_discount_for_report;

        return $this;
    }

    /**
     * Gets supplier_promo
     *
     * @return float|null
     */
    public function getSupplierPromo()
    {
        return $this->container['supplier_promo'];
    }

    /**
     * Sets supplier_promo
     *
     * @param float|null $supplier_promo Промокод
     *
     * @return self
     */
    public function setSupplierPromo($supplier_promo)
    {
        if (is_null($supplier_promo)) {
            throw new \InvalidArgumentException('non-nullable supplier_promo cannot be null');
        }
        $this->container['supplier_promo'] = $supplier_promo;

        return $this;
    }

    /**
     * Gets rid
     *
     * @return int|null
     */
    public function getRid()
    {
        return $this->container['rid'];
    }

    /**
     * Sets rid
     *
     * @param int|null $rid Уникальный идентификатор заказа
     *
     * @return self
     */
    public function setRid($rid)
    {
        if (is_null($rid)) {
            throw new \InvalidArgumentException('non-nullable rid cannot be null');
        }
        $this->container['rid'] = $rid;

        return $this;
    }

    /**
     * Gets ppvz_spp_prc
     *
     * @return float|null
     */
    public function getPpvzSppPrc()
    {
        return $this->container['ppvz_spp_prc'];
    }

    /**
     * Sets ppvz_spp_prc
     *
     * @param float|null $ppvz_spp_prc Скидка постоянного покупателя
     *
     * @return self
     */
    public function setPpvzSppPrc($ppvz_spp_prc)
    {
        if (is_null($ppvz_spp_prc)) {
            throw new \InvalidArgumentException('non-nullable ppvz_spp_prc cannot be null');
        }
        $this->container['ppvz_spp_prc'] = $ppvz_spp_prc;

        return $this;
    }

    /**
     * Gets ppvz_kvw_prc_base
     *
     * @return float|null
     */
    public function getPpvzKvwPrcBase()
    {
        return $this->container['ppvz_kvw_prc_base'];
    }

    /**
     * Sets ppvz_kvw_prc_base
     *
     * @param float|null $ppvz_kvw_prc_base Размер кВВ без НДС, % базовый
     *
     * @return self
     */
    public function setPpvzKvwPrcBase($ppvz_kvw_prc_base)
    {
        if (is_null($ppvz_kvw_prc_base)) {
            throw new \InvalidArgumentException('non-nullable ppvz_kvw_prc_base cannot be null');
        }
        $this->container['ppvz_kvw_prc_base'] = $ppvz_kvw_prc_base;

        return $this;
    }

    /**
     * Gets ppvz_kvw_prc
     *
     * @return float|null
     */
    public function getPpvzKvwPrc()
    {
        return $this->container['ppvz_kvw_prc'];
    }

    /**
     * Sets ppvz_kvw_prc
     *
     * @param float|null $ppvz_kvw_prc Итоговый кВВ без НДС, %
     *
     * @return self
     */
    public function setPpvzKvwPrc($ppvz_kvw_prc)
    {
        if (is_null($ppvz_kvw_prc)) {
            throw new \InvalidArgumentException('non-nullable ppvz_kvw_prc cannot be null');
        }
        $this->container['ppvz_kvw_prc'] = $ppvz_kvw_prc;

        return $this;
    }

    /**
     * Gets sup_rating_prc_up
     *
     * @return float|null
     */
    public function getSupRatingPrcUp()
    {
        return $this->container['sup_rating_prc_up'];
    }

    /**
     * Sets sup_rating_prc_up
     *
     * @param float|null $sup_rating_prc_up Размер снижения кВВ из-за рейтинга
     *
     * @return self
     */
    public function setSupRatingPrcUp($sup_rating_prc_up)
    {
        if (is_null($sup_rating_prc_up)) {
            throw new \InvalidArgumentException('non-nullable sup_rating_prc_up cannot be null');
        }
        $this->container['sup_rating_prc_up'] = $sup_rating_prc_up;

        return $this;
    }

    /**
     * Gets is_kgvp_v2
     *
     * @return float|null
     */
    public function getIsKgvpV2()
    {
        return $this->container['is_kgvp_v2'];
    }

    /**
     * Sets is_kgvp_v2
     *
     * @param float|null $is_kgvp_v2 Размер снижения кВВ из-за акции
     *
     * @return self
     */
    public function setIsKgvpV2($is_kgvp_v2)
    {
        if (is_null($is_kgvp_v2)) {
            throw new \InvalidArgumentException('non-nullable is_kgvp_v2 cannot be null');
        }
        $this->container['is_kgvp_v2'] = $is_kgvp_v2;

        return $this;
    }

    /**
     * Gets ppvz_sales_commission
     *
     * @return float|null
     */
    public function getPpvzSalesCommission()
    {
        return $this->container['ppvz_sales_commission'];
    }

    /**
     * Sets ppvz_sales_commission
     *
     * @param float|null $ppvz_sales_commission Вознаграждение с продаж до вычета услуг поверенного, без НДС
     *
     * @return self
     */
    public function setPpvzSalesCommission($ppvz_sales_commission)
    {
        if (is_null($ppvz_sales_commission)) {
            throw new \InvalidArgumentException('non-nullable ppvz_sales_commission cannot be null');
        }
        $this->container['ppvz_sales_commission'] = $ppvz_sales_commission;

        return $this;
    }

    /**
     * Gets ppvz_for_pay
     *
     * @return float|null
     */
    public function getPpvzForPay()
    {
        return $this->container['ppvz_for_pay'];
    }

    /**
     * Sets ppvz_for_pay
     *
     * @param float|null $ppvz_for_pay К перечислению продавцу за реализованный товар
     *
     * @return self
     */
    public function setPpvzForPay($ppvz_for_pay)
    {
        if (is_null($ppvz_for_pay)) {
            throw new \InvalidArgumentException('non-nullable ppvz_for_pay cannot be null');
        }
        $this->container['ppvz_for_pay'] = $ppvz_for_pay;

        return $this;
    }

    /**
     * Gets ppvz_reward
     *
     * @return float|null
     */
    public function getPpvzReward()
    {
        return $this->container['ppvz_reward'];
    }

    /**
     * Sets ppvz_reward
     *
     * @param float|null $ppvz_reward Возмещение за выдачу и возврат товаров на ПВЗ
     *
     * @return self
     */
    public function setPpvzReward($ppvz_reward)
    {
        if (is_null($ppvz_reward)) {
            throw new \InvalidArgumentException('non-nullable ppvz_reward cannot be null');
        }
        $this->container['ppvz_reward'] = $ppvz_reward;

        return $this;
    }

    /**
     * Gets acquiring_fee
     *
     * @return float|null
     */
    public function getAcquiringFee()
    {
        return $this->container['acquiring_fee'];
    }

    /**
     * Sets acquiring_fee
     *
     * @param float|null $acquiring_fee Возмещение издержек по эквайрингу. <br> Издержки WB за услуги эквайринга: вычитаются из вознаграждения WB и не влияют на доход продавца.
     *
     * @return self
     */
    public function setAcquiringFee($acquiring_fee)
    {
        if (is_null($acquiring_fee)) {
            throw new \InvalidArgumentException('non-nullable acquiring_fee cannot be null');
        }
        $this->container['acquiring_fee'] = $acquiring_fee;

        return $this;
    }

    /**
     * Gets acquiring_bank
     *
     * @return string|null
     */
    public function getAcquiringBank()
    {
        return $this->container['acquiring_bank'];
    }

    /**
     * Sets acquiring_bank
     *
     * @param string|null $acquiring_bank Наименование банка-эквайера
     *
     * @return self
     */
    public function setAcquiringBank($acquiring_bank)
    {
        if (is_null($acquiring_bank)) {
            throw new \InvalidArgumentException('non-nullable acquiring_bank cannot be null');
        }
        $this->container['acquiring_bank'] = $acquiring_bank;

        return $this;
    }

    /**
     * Gets ppvz_vw
     *
     * @return float|null
     */
    public function getPpvzVw()
    {
        return $this->container['ppvz_vw'];
    }

    /**
     * Sets ppvz_vw
     *
     * @param float|null $ppvz_vw Вознаграждение WB без НДС
     *
     * @return self
     */
    public function setPpvzVw($ppvz_vw)
    {
        if (is_null($ppvz_vw)) {
            throw new \InvalidArgumentException('non-nullable ppvz_vw cannot be null');
        }
        $this->container['ppvz_vw'] = $ppvz_vw;

        return $this;
    }

    /**
     * Gets ppvz_vw_nds
     *
     * @return float|null
     */
    public function getPpvzVwNds()
    {
        return $this->container['ppvz_vw_nds'];
    }

    /**
     * Sets ppvz_vw_nds
     *
     * @param float|null $ppvz_vw_nds НДС с вознаграждения WB
     *
     * @return self
     */
    public function setPpvzVwNds($ppvz_vw_nds)
    {
        if (is_null($ppvz_vw_nds)) {
            throw new \InvalidArgumentException('non-nullable ppvz_vw_nds cannot be null');
        }
        $this->container['ppvz_vw_nds'] = $ppvz_vw_nds;

        return $this;
    }

    /**
     * Gets ppvz_office_id
     *
     * @return int|null
     */
    public function getPpvzOfficeId()
    {
        return $this->container['ppvz_office_id'];
    }

    /**
     * Sets ppvz_office_id
     *
     * @param int|null $ppvz_office_id Номер офиса
     *
     * @return self
     */
    public function setPpvzOfficeId($ppvz_office_id)
    {
        if (is_null($ppvz_office_id)) {
            throw new \InvalidArgumentException('non-nullable ppvz_office_id cannot be null');
        }
        $this->container['ppvz_office_id'] = $ppvz_office_id;

        return $this;
    }

    /**
     * Gets ppvz_office_name
     *
     * @return string|null
     */
    public function getPpvzOfficeName()
    {
        return $this->container['ppvz_office_name'];
    }

    /**
     * Sets ppvz_office_name
     *
     * @param string|null $ppvz_office_name Наименование офиса доставки
     *
     * @return self
     */
    public function setPpvzOfficeName($ppvz_office_name)
    {
        if (is_null($ppvz_office_name)) {
            throw new \InvalidArgumentException('non-nullable ppvz_office_name cannot be null');
        }
        $this->container['ppvz_office_name'] = $ppvz_office_name;

        return $this;
    }

    /**
     * Gets ppvz_supplier_id
     *
     * @return int|null
     */
    public function getPpvzSupplierId()
    {
        return $this->container['ppvz_supplier_id'];
    }

    /**
     * Sets ppvz_supplier_id
     *
     * @param int|null $ppvz_supplier_id Номер партнера
     *
     * @return self
     */
    public function setPpvzSupplierId($ppvz_supplier_id)
    {
        if (is_null($ppvz_supplier_id)) {
            throw new \InvalidArgumentException('non-nullable ppvz_supplier_id cannot be null');
        }
        $this->container['ppvz_supplier_id'] = $ppvz_supplier_id;

        return $this;
    }

    /**
     * Gets ppvz_supplier_name
     *
     * @return string|null
     */
    public function getPpvzSupplierName()
    {
        return $this->container['ppvz_supplier_name'];
    }

    /**
     * Sets ppvz_supplier_name
     *
     * @param string|null $ppvz_supplier_name Партнер
     *
     * @return self
     */
    public function setPpvzSupplierName($ppvz_supplier_name)
    {
        if (is_null($ppvz_supplier_name)) {
            throw new \InvalidArgumentException('non-nullable ppvz_supplier_name cannot be null');
        }
        $this->container['ppvz_supplier_name'] = $ppvz_supplier_name;

        return $this;
    }

    /**
     * Gets ppvz_inn
     *
     * @return string|null
     */
    public function getPpvzInn()
    {
        return $this->container['ppvz_inn'];
    }

    /**
     * Sets ppvz_inn
     *
     * @param string|null $ppvz_inn ИНН партнера
     *
     * @return self
     */
    public function setPpvzInn($ppvz_inn)
    {
        if (is_null($ppvz_inn)) {
            throw new \InvalidArgumentException('non-nullable ppvz_inn cannot be null');
        }
        $this->container['ppvz_inn'] = $ppvz_inn;

        return $this;
    }

    /**
     * Gets declaration_number
     *
     * @return string|null
     */
    public function getDeclarationNumber()
    {
        return $this->container['declaration_number'];
    }

    /**
     * Sets declaration_number
     *
     * @param string|null $declaration_number Номер таможенной декларации
     *
     * @return self
     */
    public function setDeclarationNumber($declaration_number)
    {
        if (is_null($declaration_number)) {
            throw new \InvalidArgumentException('non-nullable declaration_number cannot be null');
        }
        $this->container['declaration_number'] = $declaration_number;

        return $this;
    }

    /**
     * Gets bonus_type_name
     *
     * @return string|null
     */
    public function getBonusTypeName()
    {
        return $this->container['bonus_type_name'];
    }

    /**
     * Sets bonus_type_name
     *
     * @param string|null $bonus_type_name Обоснование штрафов и доплат. <br> Поле будет в ответе при наличии значения
     *
     * @return self
     */
    public function setBonusTypeName($bonus_type_name)
    {
        if (is_null($bonus_type_name)) {
            throw new \InvalidArgumentException('non-nullable bonus_type_name cannot be null');
        }
        $this->container['bonus_type_name'] = $bonus_type_name;

        return $this;
    }

    /**
     * Gets sticker_id
     *
     * @return string|null
     */
    public function getStickerId()
    {
        return $this->container['sticker_id'];
    }

    /**
     * Sets sticker_id
     *
     * @param string|null $sticker_id Цифровое значение стикера, который клеится на товар в процессе сборки заказа по схеме \"Маркетплейс\"
     *
     * @return self
     */
    public function setStickerId($sticker_id)
    {
        if (is_null($sticker_id)) {
            throw new \InvalidArgumentException('non-nullable sticker_id cannot be null');
        }
        $this->container['sticker_id'] = $sticker_id;

        return $this;
    }

    /**
     * Gets site_country
     *
     * @return string|null
     */
    public function getSiteCountry()
    {
        return $this->container['site_country'];
    }

    /**
     * Sets site_country
     *
     * @param string|null $site_country Страна продажи
     *
     * @return self
     */
    public function setSiteCountry($site_country)
    {
        if (is_null($site_country)) {
            throw new \InvalidArgumentException('non-nullable site_country cannot be null');
        }
        $this->container['site_country'] = $site_country;

        return $this;
    }

    /**
     * Gets penalty
     *
     * @return float|null
     */
    public function getPenalty()
    {
        return $this->container['penalty'];
    }

    /**
     * Sets penalty
     *
     * @param float|null $penalty Штрафы
     *
     * @return self
     */
    public function setPenalty($penalty)
    {
        if (is_null($penalty)) {
            throw new \InvalidArgumentException('non-nullable penalty cannot be null');
        }
        $this->container['penalty'] = $penalty;

        return $this;
    }

    /**
     * Gets additional_payment
     *
     * @return float|null
     */
    public function getAdditionalPayment()
    {
        return $this->container['additional_payment'];
    }

    /**
     * Sets additional_payment
     *
     * @param float|null $additional_payment Доплаты
     *
     * @return self
     */
    public function setAdditionalPayment($additional_payment)
    {
        if (is_null($additional_payment)) {
            throw new \InvalidArgumentException('non-nullable additional_payment cannot be null');
        }
        $this->container['additional_payment'] = $additional_payment;

        return $this;
    }

    /**
     * Gets rebill_logistic_cost
     *
     * @return float|null
     */
    public function getRebillLogisticCost()
    {
        return $this->container['rebill_logistic_cost'];
    }

    /**
     * Sets rebill_logistic_cost
     *
     * @param float|null $rebill_logistic_cost Возмещение издержек по перевозке. Поле будет в ответе при наличии значения
     *
     * @return self
     */
    public function setRebillLogisticCost($rebill_logistic_cost)
    {
        if (is_null($rebill_logistic_cost)) {
            throw new \InvalidArgumentException('non-nullable rebill_logistic_cost cannot be null');
        }
        $this->container['rebill_logistic_cost'] = $rebill_logistic_cost;

        return $this;
    }

    /**
     * Gets rebill_logistic_org
     *
     * @return string|null
     */
    public function getRebillLogisticOrg()
    {
        return $this->container['rebill_logistic_org'];
    }

    /**
     * Sets rebill_logistic_org
     *
     * @param string|null $rebill_logistic_org Организатор перевозки. Поле будет в ответе при наличии значения.
     *
     * @return self
     */
    public function setRebillLogisticOrg($rebill_logistic_org)
    {
        if (is_null($rebill_logistic_org)) {
            throw new \InvalidArgumentException('non-nullable rebill_logistic_org cannot be null');
        }
        $this->container['rebill_logistic_org'] = $rebill_logistic_org;

        return $this;
    }

    /**
     * Gets kiz
     *
     * @return string|null
     */
    public function getKiz()
    {
        return $this->container['kiz'];
    }

    /**
     * Sets kiz
     *
     * @param string|null $kiz Код маркировки. <br> Поле будет в ответе при наличии значения
     *
     * @return self
     */
    public function setKiz($kiz)
    {
        if (is_null($kiz)) {
            throw new \InvalidArgumentException('non-nullable kiz cannot be null');
        }
        $this->container['kiz'] = $kiz;

        return $this;
    }

    /**
     * Gets srid
     *
     * @return string|null
     */
    public function getSrid()
    {
        return $this->container['srid'];
    }

    /**
     * Sets srid
     *
     * @param string|null $srid Уникальный идентификатор заказа. Примечание для использующих API Marketplace: `srid` равен `rid` в ответах методов сборочных заданий.
     *
     * @return self
     */
    public function setSrid($srid)
    {
        if (is_null($srid)) {
            throw new \InvalidArgumentException('non-nullable srid cannot be null');
        }
        $this->container['srid'] = $srid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


