<?php
/**
 * ContentV1CardsFilterPost200ResponseDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API продавца
 *
 * # Общее описание <style> .langChange {   text-align: left;   padding: 2px 222px 2px 18px; } </style> <style> .new {   display: inline-block;   padding: 2px 8px;   margin: 0;   background-color: #ffa500;   color: #ffffff;   font-size: 13px;   vertical-align: middle;   line-height: 1.6;   border-radius: 4px;   font-weight: 600;   font-size: 12px; } </style> <style> .newM {   padding: 5px 10px;   display: inline-block;   background-color: #ffa500;   color: #ffffff;   cursor: pointer;   text-align: center;   outline: none;   margin: 0 5px 5px 5px;   #border: 1px solid #07090b;   border-radius: 5px;   min-width: 60px;   font-size: 0.9em;   font-weight: bold; } </style>  Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной провеПродвижение /и API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul> <br>  ## Поддержка Техническая поддержка осуществляется через диалоги в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> <br> <br>  ## Авторизация Авторизация осуществляется по токенам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к API](https://seller.wildberries.ru/supplier-settings/access-to-api).   <br>  <br>  Существует три типа токенов:   <ol>     <li>Стандартный. Используется для работы с методами из разделов: Цены, Промокоды и скидки, Контент, Marketplace, Рекомендации, Отзывы, Вопросы.</li>     <li>Статистика. Используется для работы с методами из раздела Статистика.</li>     <li>Продвижение. Используется для работы с методами из раздела Продвижение.</li>   </ol>    Обратите внимание, что токен отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный токен следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. <br> <br> Обращаем ваше внимание, что интеграции с Порталом Продавца, не использующие Публичное API, противоречат пункту 9.7.6 оферты. <br> Тем не менее, при отсутствии прямой угрозы утечки данных из личного кабинета продавца Wildberries заранее уведомит продавца о запланированной блокировке, связанной с этим пунктом, давая возможность отключить интеграцию. <br> <br> <br> ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul> <br> ## Release Notes <p>Для просмотра обновлений перейдите по <span><a href=\"./releasenotes/index.html\" target=\"_blank\">ссылке</a></span>.</p>
 *
 * The version of the OpenAPI document: 2.16
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContentV1CardsFilterPost200ResponseDataInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContentV1CardsFilterPost200ResponseDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_content_v1_cards_filter_post_200_response_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'imt_id' => 'int',
        'object' => 'string',
        'object_id' => 'int',
        'nm_id' => 'int',
        'vendor_code' => 'string',
        'is_prohibited' => 'bool',
        'tags' => '\OpenAPI\Client\Model\ContentV1CardsFilterPost200ResponseDataInnerTagsInner[]',
        'media_files' => 'string[]',
        'sizes' => '\OpenAPI\Client\Model\ContentV1CardsFilterPost200ResponseDataInnerSizesInner[]',
        'characteristics' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'imt_id' => null,
        'object' => null,
        'object_id' => null,
        'nm_id' => null,
        'vendor_code' => null,
        'is_prohibited' => null,
        'tags' => null,
        'media_files' => null,
        'sizes' => null,
        'characteristics' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'imt_id' => false,
		'object' => false,
		'object_id' => false,
		'nm_id' => false,
		'vendor_code' => false,
		'is_prohibited' => false,
		'tags' => false,
		'media_files' => false,
		'sizes' => false,
		'characteristics' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'imt_id' => 'imtID',
        'object' => 'object',
        'object_id' => 'objectID',
        'nm_id' => 'nmID',
        'vendor_code' => 'vendorCode',
        'is_prohibited' => 'isProhibited',
        'tags' => 'tags',
        'media_files' => 'mediaFiles',
        'sizes' => 'sizes',
        'characteristics' => 'characteristics'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'imt_id' => 'setImtId',
        'object' => 'setObject',
        'object_id' => 'setObjectId',
        'nm_id' => 'setNmId',
        'vendor_code' => 'setVendorCode',
        'is_prohibited' => 'setIsProhibited',
        'tags' => 'setTags',
        'media_files' => 'setMediaFiles',
        'sizes' => 'setSizes',
        'characteristics' => 'setCharacteristics'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'imt_id' => 'getImtId',
        'object' => 'getObject',
        'object_id' => 'getObjectId',
        'nm_id' => 'getNmId',
        'vendor_code' => 'getVendorCode',
        'is_prohibited' => 'getIsProhibited',
        'tags' => 'getTags',
        'media_files' => 'getMediaFiles',
        'sizes' => 'getSizes',
        'characteristics' => 'getCharacteristics'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('imt_id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('object_id', $data ?? [], null);
        $this->setIfExists('nm_id', $data ?? [], null);
        $this->setIfExists('vendor_code', $data ?? [], null);
        $this->setIfExists('is_prohibited', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('media_files', $data ?? [], null);
        $this->setIfExists('sizes', $data ?? [], null);
        $this->setIfExists('characteristics', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets imt_id
     *
     * @return int|null
     */
    public function getImtId()
    {
        return $this->container['imt_id'];
    }

    /**
     * Sets imt_id
     *
     * @param int|null $imt_id Идентификатор карточки товара (нужен для группирования НМ в одно КТ)
     *
     * @return self
     */
    public function setImtId($imt_id)
    {
        if (is_null($imt_id)) {
            throw new \InvalidArgumentException('non-nullable imt_id cannot be null');
        }
        $this->container['imt_id'] = $imt_id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object Предмет
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return int|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param int|null $object_id Идентификатор предмета
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        if (is_null($object_id)) {
            throw new \InvalidArgumentException('non-nullable object_id cannot be null');
        }
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets nm_id
     *
     * @return int|null
     */
    public function getNmId()
    {
        return $this->container['nm_id'];
    }

    /**
     * Sets nm_id
     *
     * @param int|null $nm_id Артикул WB
     *
     * @return self
     */
    public function setNmId($nm_id)
    {
        if (is_null($nm_id)) {
            throw new \InvalidArgumentException('non-nullable nm_id cannot be null');
        }
        $this->container['nm_id'] = $nm_id;

        return $this;
    }

    /**
     * Gets vendor_code
     *
     * @return string|null
     */
    public function getVendorCode()
    {
        return $this->container['vendor_code'];
    }

    /**
     * Sets vendor_code
     *
     * @param string|null $vendor_code Артикул продавца
     *
     * @return self
     */
    public function setVendorCode($vendor_code)
    {
        if (is_null($vendor_code)) {
            throw new \InvalidArgumentException('non-nullable vendor_code cannot be null');
        }
        $this->container['vendor_code'] = $vendor_code;

        return $this;
    }

    /**
     * Gets is_prohibited
     *
     * @return bool|null
     */
    public function getIsProhibited()
    {
        return $this->container['is_prohibited'];
    }

    /**
     * Sets is_prohibited
     *
     * @param bool|null $is_prohibited `true` - категория карточки запрещена к реализации<br> `false` категория карточки разрешена к реализации
     *
     * @return self
     */
    public function setIsProhibited($is_prohibited)
    {
        if (is_null($is_prohibited)) {
            throw new \InvalidArgumentException('non-nullable is_prohibited cannot be null');
        }
        $this->container['is_prohibited'] = $is_prohibited;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\ContentV1CardsFilterPost200ResponseDataInnerTagsInner[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\ContentV1CardsFilterPost200ResponseDataInnerTagsInner[]|null $tags Массив с информацией о тегах. Поле будет в ответе при наличии тегов в КТ.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets media_files
     *
     * @return string[]|null
     */
    public function getMediaFiles()
    {
        return $this->container['media_files'];
    }

    /**
     * Sets media_files
     *
     * @param string[]|null $media_files Медиафайлы номенклатуры. <br>Фото, URL которого заканчивается на <b>1.jpg</b> является главным в карточке.
     *
     * @return self
     */
    public function setMediaFiles($media_files)
    {
        if (is_null($media_files)) {
            throw new \InvalidArgumentException('non-nullable media_files cannot be null');
        }
        $this->container['media_files'] = $media_files;

        return $this;
    }

    /**
     * Gets sizes
     *
     * @return \OpenAPI\Client\Model\ContentV1CardsFilterPost200ResponseDataInnerSizesInner[]|null
     */
    public function getSizes()
    {
        return $this->container['sizes'];
    }

    /**
     * Sets sizes
     *
     * @param \OpenAPI\Client\Model\ContentV1CardsFilterPost200ResponseDataInnerSizesInner[]|null $sizes sizes
     *
     * @return self
     */
    public function setSizes($sizes)
    {
        if (is_null($sizes)) {
            throw new \InvalidArgumentException('non-nullable sizes cannot be null');
        }
        $this->container['sizes'] = $sizes;

        return $this;
    }

    /**
     * Gets characteristics
     *
     * @return object[]|null
     */
    public function getCharacteristics()
    {
        return $this->container['characteristics'];
    }

    /**
     * Sets characteristics
     *
     * @param object[]|null $characteristics Массив характеристик, индивидуальный для каждой категории
     *
     * @return self
     */
    public function setCharacteristics($characteristics)
    {
        if (is_null($characteristics)) {
            throw new \InvalidArgumentException('non-nullable characteristics cannot be null');
        }
        $this->container['characteristics'] = $characteristics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


