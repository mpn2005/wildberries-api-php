<?php
/**
 * StocksItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API продавца
 *
 * # Общее описание <style> .langChange {   text-align: left;   padding: 2px 222px 2px 18px; } </style> <style> .new {   display: inline-block;   padding: 2px 8px;   margin: 0;   background-color: #ffa500;   color: #ffffff;   font-size: 13px;   vertical-align: middle;   line-height: 1.6;   border-radius: 4px;   font-weight: 600;   font-size: 12px; } </style> <style> .newM {   padding: 5px 10px;   display: inline-block;   background-color: #ffa500;   color: #ffffff;   cursor: pointer;   text-align: center;   outline: none;   margin: 0 5px 5px 5px;   #border: 1px solid #07090b;   border-radius: 5px;   min-width: 60px;   font-size: 0.9em;   font-weight: bold; } </style>  Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной провеПродвижение /и API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul> <br>  ## Поддержка Техническая поддержка осуществляется через диалоги в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> <br> <br>  ## Авторизация Авторизация осуществляется по токенам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к API](https://seller.wildberries.ru/supplier-settings/access-to-api).   <br>  <br>  Существует три типа токенов:   <ol>     <li>Стандартный. Используется для работы с методами из разделов: Цены, Промокоды и скидки, Контент, Marketplace, Рекомендации, Отзывы, Вопросы.</li>     <li>Статистика. Используется для работы с методами из раздела Статистика.</li>     <li>Продвижение. Используется для работы с методами из раздела Продвижение.</li>   </ol>    Обратите внимание, что токен отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный токен следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. <br> <br> Обращаем ваше внимание, что интеграции с Порталом Продавца, не использующие Публичное API, противоречат пункту 9.7.6 оферты. <br> Тем не менее, при отсутствии прямой угрозы утечки данных из личного кабинета продавца Wildberries заранее уведомит продавца о запланированной блокировке, связанной с этим пунктом, давая возможность отключить интеграцию. <br> <br> <br> ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul> <br> ## Release Notes <p>Для просмотра обновлений перейдите по <span><a href=\"./releasenotes/index.html\" target=\"_blank\">ссылке</a></span>.</p>
 *
 * The version of the OpenAPI document: 2.17
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StocksItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StocksItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StocksItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'last_change_date' => '\DateTime',
        'warehouse_name' => 'string',
        'supplier_article' => 'string',
        'nm_id' => 'int',
        'barcode' => 'string',
        'quantity' => 'int',
        'in_way_to_client' => 'int',
        'in_way_from_client' => 'int',
        'quantity_full' => 'int',
        'category' => 'string',
        'subject' => 'string',
        'brand' => 'string',
        'tech_size' => 'string',
        'price' => 'float',
        'discount' => 'float',
        'is_supply' => 'bool',
        'is_realization' => 'bool',
        'sc_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'last_change_date' => 'date-time',
        'warehouse_name' => null,
        'supplier_article' => null,
        'nm_id' => null,
        'barcode' => null,
        'quantity' => null,
        'in_way_to_client' => null,
        'in_way_from_client' => null,
        'quantity_full' => null,
        'category' => null,
        'subject' => null,
        'brand' => null,
        'tech_size' => null,
        'price' => null,
        'discount' => null,
        'is_supply' => null,
        'is_realization' => null,
        'sc_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'last_change_date' => false,
		'warehouse_name' => false,
		'supplier_article' => false,
		'nm_id' => false,
		'barcode' => false,
		'quantity' => false,
		'in_way_to_client' => false,
		'in_way_from_client' => false,
		'quantity_full' => false,
		'category' => false,
		'subject' => false,
		'brand' => false,
		'tech_size' => false,
		'price' => false,
		'discount' => false,
		'is_supply' => false,
		'is_realization' => false,
		'sc_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_change_date' => 'lastChangeDate',
        'warehouse_name' => 'warehouseName',
        'supplier_article' => 'supplierArticle',
        'nm_id' => 'nmId',
        'barcode' => 'barcode',
        'quantity' => 'quantity',
        'in_way_to_client' => 'inWayToClient',
        'in_way_from_client' => 'inWayFromClient',
        'quantity_full' => 'quantityFull',
        'category' => 'category',
        'subject' => 'subject',
        'brand' => 'brand',
        'tech_size' => 'techSize',
        'price' => 'Price',
        'discount' => 'Discount',
        'is_supply' => 'isSupply',
        'is_realization' => 'isRealization',
        'sc_code' => 'SCCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_change_date' => 'setLastChangeDate',
        'warehouse_name' => 'setWarehouseName',
        'supplier_article' => 'setSupplierArticle',
        'nm_id' => 'setNmId',
        'barcode' => 'setBarcode',
        'quantity' => 'setQuantity',
        'in_way_to_client' => 'setInWayToClient',
        'in_way_from_client' => 'setInWayFromClient',
        'quantity_full' => 'setQuantityFull',
        'category' => 'setCategory',
        'subject' => 'setSubject',
        'brand' => 'setBrand',
        'tech_size' => 'setTechSize',
        'price' => 'setPrice',
        'discount' => 'setDiscount',
        'is_supply' => 'setIsSupply',
        'is_realization' => 'setIsRealization',
        'sc_code' => 'setScCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_change_date' => 'getLastChangeDate',
        'warehouse_name' => 'getWarehouseName',
        'supplier_article' => 'getSupplierArticle',
        'nm_id' => 'getNmId',
        'barcode' => 'getBarcode',
        'quantity' => 'getQuantity',
        'in_way_to_client' => 'getInWayToClient',
        'in_way_from_client' => 'getInWayFromClient',
        'quantity_full' => 'getQuantityFull',
        'category' => 'getCategory',
        'subject' => 'getSubject',
        'brand' => 'getBrand',
        'tech_size' => 'getTechSize',
        'price' => 'getPrice',
        'discount' => 'getDiscount',
        'is_supply' => 'getIsSupply',
        'is_realization' => 'getIsRealization',
        'sc_code' => 'getScCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('last_change_date', $data ?? [], null);
        $this->setIfExists('warehouse_name', $data ?? [], null);
        $this->setIfExists('supplier_article', $data ?? [], null);
        $this->setIfExists('nm_id', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('in_way_to_client', $data ?? [], null);
        $this->setIfExists('in_way_from_client', $data ?? [], null);
        $this->setIfExists('quantity_full', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('tech_size', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('is_supply', $data ?? [], null);
        $this->setIfExists('is_realization', $data ?? [], null);
        $this->setIfExists('sc_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['warehouse_name']) && (mb_strlen($this->container['warehouse_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'warehouse_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['supplier_article']) && (mb_strlen($this->container['supplier_article']) > 75)) {
            $invalidProperties[] = "invalid value for 'supplier_article', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['barcode']) && (mb_strlen($this->container['barcode']) > 30)) {
            $invalidProperties[] = "invalid value for 'barcode', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['category']) && (mb_strlen($this->container['category']) > 50)) {
            $invalidProperties[] = "invalid value for 'category', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 50)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['brand']) && (mb_strlen($this->container['brand']) > 50)) {
            $invalidProperties[] = "invalid value for 'brand', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['tech_size']) && (mb_strlen($this->container['tech_size']) > 30)) {
            $invalidProperties[] = "invalid value for 'tech_size', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['sc_code']) && (mb_strlen($this->container['sc_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'sc_code', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_change_date
     *
     * @return \DateTime|null
     */
    public function getLastChangeDate()
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     *
     * @param \DateTime|null $last_change_date Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе. Если часовой пояс не указан, то берется Московское время (UTC+3).
     *
     * @return self
     */
    public function setLastChangeDate($last_change_date)
    {
        if (is_null($last_change_date)) {
            throw new \InvalidArgumentException('non-nullable last_change_date cannot be null');
        }
        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets warehouse_name
     *
     * @return string|null
     */
    public function getWarehouseName()
    {
        return $this->container['warehouse_name'];
    }

    /**
     * Sets warehouse_name
     *
     * @param string|null $warehouse_name Название склада
     *
     * @return self
     */
    public function setWarehouseName($warehouse_name)
    {
        if (is_null($warehouse_name)) {
            throw new \InvalidArgumentException('non-nullable warehouse_name cannot be null');
        }
        if ((mb_strlen($warehouse_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_name when calling StocksItem., must be smaller than or equal to 50.');
        }

        $this->container['warehouse_name'] = $warehouse_name;

        return $this;
    }

    /**
     * Gets supplier_article
     *
     * @return string|null
     */
    public function getSupplierArticle()
    {
        return $this->container['supplier_article'];
    }

    /**
     * Sets supplier_article
     *
     * @param string|null $supplier_article Артикул продавца
     *
     * @return self
     */
    public function setSupplierArticle($supplier_article)
    {
        if (is_null($supplier_article)) {
            throw new \InvalidArgumentException('non-nullable supplier_article cannot be null');
        }
        if ((mb_strlen($supplier_article) > 75)) {
            throw new \InvalidArgumentException('invalid length for $supplier_article when calling StocksItem., must be smaller than or equal to 75.');
        }

        $this->container['supplier_article'] = $supplier_article;

        return $this;
    }

    /**
     * Gets nm_id
     *
     * @return int|null
     */
    public function getNmId()
    {
        return $this->container['nm_id'];
    }

    /**
     * Sets nm_id
     *
     * @param int|null $nm_id Артикул WB
     *
     * @return self
     */
    public function setNmId($nm_id)
    {
        if (is_null($nm_id)) {
            throw new \InvalidArgumentException('non-nullable nm_id cannot be null');
        }
        $this->container['nm_id'] = $nm_id;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode Баркод
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        if ((mb_strlen($barcode) > 30)) {
            throw new \InvalidArgumentException('invalid length for $barcode when calling StocksItem., must be smaller than or equal to 30.');
        }

        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Количество, доступное для продажи (сколько можно добавить в корзину)
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets in_way_to_client
     *
     * @return int|null
     */
    public function getInWayToClient()
    {
        return $this->container['in_way_to_client'];
    }

    /**
     * Sets in_way_to_client
     *
     * @param int|null $in_way_to_client В пути к клиенту
     *
     * @return self
     */
    public function setInWayToClient($in_way_to_client)
    {
        if (is_null($in_way_to_client)) {
            throw new \InvalidArgumentException('non-nullable in_way_to_client cannot be null');
        }
        $this->container['in_way_to_client'] = $in_way_to_client;

        return $this;
    }

    /**
     * Gets in_way_from_client
     *
     * @return int|null
     */
    public function getInWayFromClient()
    {
        return $this->container['in_way_from_client'];
    }

    /**
     * Sets in_way_from_client
     *
     * @param int|null $in_way_from_client В пути от клиента
     *
     * @return self
     */
    public function setInWayFromClient($in_way_from_client)
    {
        if (is_null($in_way_from_client)) {
            throw new \InvalidArgumentException('non-nullable in_way_from_client cannot be null');
        }
        $this->container['in_way_from_client'] = $in_way_from_client;

        return $this;
    }

    /**
     * Gets quantity_full
     *
     * @return int|null
     */
    public function getQuantityFull()
    {
        return $this->container['quantity_full'];
    }

    /**
     * Sets quantity_full
     *
     * @param int|null $quantity_full Полное (непроданное) количество, которое числится за складом (= `quantity` + в пути)
     *
     * @return self
     */
    public function setQuantityFull($quantity_full)
    {
        if (is_null($quantity_full)) {
            throw new \InvalidArgumentException('non-nullable quantity_full cannot be null');
        }
        $this->container['quantity_full'] = $quantity_full;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Категория
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        if ((mb_strlen($category) > 50)) {
            throw new \InvalidArgumentException('invalid length for $category when calling StocksItem., must be smaller than or equal to 50.');
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Предмет
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        if ((mb_strlen($subject) > 50)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling StocksItem., must be smaller than or equal to 50.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Бренд
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        if ((mb_strlen($brand) > 50)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling StocksItem., must be smaller than or equal to 50.');
        }

        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets tech_size
     *
     * @return string|null
     */
    public function getTechSize()
    {
        return $this->container['tech_size'];
    }

    /**
     * Sets tech_size
     *
     * @param string|null $tech_size Размер
     *
     * @return self
     */
    public function setTechSize($tech_size)
    {
        if (is_null($tech_size)) {
            throw new \InvalidArgumentException('non-nullable tech_size cannot be null');
        }
        if ((mb_strlen($tech_size) > 30)) {
            throw new \InvalidArgumentException('invalid length for $tech_size when calling StocksItem., must be smaller than or equal to 30.');
        }

        $this->container['tech_size'] = $tech_size;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Цена
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount Скидка
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets is_supply
     *
     * @return bool|null
     */
    public function getIsSupply()
    {
        return $this->container['is_supply'];
    }

    /**
     * Sets is_supply
     *
     * @param bool|null $is_supply Договор поставки (внутренние технологические данные)
     *
     * @return self
     */
    public function setIsSupply($is_supply)
    {
        if (is_null($is_supply)) {
            throw new \InvalidArgumentException('non-nullable is_supply cannot be null');
        }
        $this->container['is_supply'] = $is_supply;

        return $this;
    }

    /**
     * Gets is_realization
     *
     * @return bool|null
     */
    public function getIsRealization()
    {
        return $this->container['is_realization'];
    }

    /**
     * Sets is_realization
     *
     * @param bool|null $is_realization Договор реализации (внутренние технологические данные)
     *
     * @return self
     */
    public function setIsRealization($is_realization)
    {
        if (is_null($is_realization)) {
            throw new \InvalidArgumentException('non-nullable is_realization cannot be null');
        }
        $this->container['is_realization'] = $is_realization;

        return $this;
    }

    /**
     * Gets sc_code
     *
     * @return string|null
     */
    public function getScCode()
    {
        return $this->container['sc_code'];
    }

    /**
     * Sets sc_code
     *
     * @param string|null $sc_code Код контракта (внутренние технологические данные)
     *
     * @return self
     */
    public function setScCode($sc_code)
    {
        if (is_null($sc_code)) {
            throw new \InvalidArgumentException('non-nullable sc_code cannot be null');
        }
        if ((mb_strlen($sc_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $sc_code when calling StocksItem., must be smaller than or equal to 50.');
        }

        $this->container['sc_code'] = $sc_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


