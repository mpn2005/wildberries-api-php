<?php
/**
 * GoodHistory
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Работа с товарами
 *
 * <div class=\"description_important\">       Узнать больше о работе с товарами можно в <a href=\"https://seller.wildberries.ru/instructions/category/8eeeafc6-4b7a-453d-925a-00fc56510f67?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">справочном центре</a> </div>  Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца.
 *
 * The version of the OpenAPI document: products
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GoodHistory Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GoodHistory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GoodHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nm_id' => 'int',
        'vendor_code' => 'string',
        'size_id' => 'int',
        'tech_size_name' => 'string',
        'price' => 'int',
        'currency_iso_code4217' => 'string',
        'discount' => 'int',
        'club_discount' => 'int',
        'status' => 'int',
        'error_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'nm_id' => null,
        'vendor_code' => null,
        'size_id' => null,
        'tech_size_name' => null,
        'price' => null,
        'currency_iso_code4217' => null,
        'discount' => null,
        'club_discount' => null,
        'status' => null,
        'error_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'nm_id' => false,
        'vendor_code' => false,
        'size_id' => false,
        'tech_size_name' => false,
        'price' => false,
        'currency_iso_code4217' => false,
        'discount' => false,
        'club_discount' => false,
        'status' => false,
        'error_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nm_id' => 'nmID',
        'vendor_code' => 'vendorCode',
        'size_id' => 'sizeID',
        'tech_size_name' => 'techSizeName',
        'price' => 'price',
        'currency_iso_code4217' => 'currencyIsoCode4217',
        'discount' => 'discount',
        'club_discount' => 'clubDiscount',
        'status' => 'status',
        'error_text' => 'errorText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nm_id' => 'setNmId',
        'vendor_code' => 'setVendorCode',
        'size_id' => 'setSizeId',
        'tech_size_name' => 'setTechSizeName',
        'price' => 'setPrice',
        'currency_iso_code4217' => 'setCurrencyIsoCode4217',
        'discount' => 'setDiscount',
        'club_discount' => 'setClubDiscount',
        'status' => 'setStatus',
        'error_text' => 'setErrorText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nm_id' => 'getNmId',
        'vendor_code' => 'getVendorCode',
        'size_id' => 'getSizeId',
        'tech_size_name' => 'getTechSizeName',
        'price' => 'getPrice',
        'currency_iso_code4217' => 'getCurrencyIsoCode4217',
        'discount' => 'getDiscount',
        'club_discount' => 'getClubDiscount',
        'status' => 'getStatus',
        'error_text' => 'getErrorText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('nm_id', $data ?? [], null);
        $this->setIfExists('vendor_code', $data ?? [], null);
        $this->setIfExists('size_id', $data ?? [], null);
        $this->setIfExists('tech_size_name', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('currency_iso_code4217', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('club_discount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('error_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nm_id
     *
     * @return int|null
     */
    public function getNmId()
    {
        return $this->container['nm_id'];
    }

    /**
     * Sets nm_id
     *
     * @param int|null $nm_id Артикул WB
     *
     * @return self
     */
    public function setNmId($nm_id)
    {
        if (is_null($nm_id)) {
            throw new \InvalidArgumentException('non-nullable nm_id cannot be null');
        }
        $this->container['nm_id'] = $nm_id;

        return $this;
    }

    /**
     * Gets vendor_code
     *
     * @return string|null
     */
    public function getVendorCode()
    {
        return $this->container['vendor_code'];
    }

    /**
     * Sets vendor_code
     *
     * @param string|null $vendor_code Артикул продавца
     *
     * @return self
     */
    public function setVendorCode($vendor_code)
    {
        if (is_null($vendor_code)) {
            throw new \InvalidArgumentException('non-nullable vendor_code cannot be null');
        }
        $this->container['vendor_code'] = $vendor_code;

        return $this;
    }

    /**
     * Gets size_id
     *
     * @return int|null
     */
    public function getSizeId()
    {
        return $this->container['size_id'];
    }

    /**
     * Sets size_id
     *
     * @param int|null $size_id ID размера. В методах контента это поле `chrtID`
     *
     * @return self
     */
    public function setSizeId($size_id)
    {
        if (is_null($size_id)) {
            throw new \InvalidArgumentException('non-nullable size_id cannot be null');
        }
        $this->container['size_id'] = $size_id;

        return $this;
    }

    /**
     * Gets tech_size_name
     *
     * @return string|null
     */
    public function getTechSizeName()
    {
        return $this->container['tech_size_name'];
    }

    /**
     * Sets tech_size_name
     *
     * @param string|null $tech_size_name Размер
     *
     * @return self
     */
    public function setTechSizeName($tech_size_name)
    {
        if (is_null($tech_size_name)) {
            throw new \InvalidArgumentException('non-nullable tech_size_name cannot be null');
        }
        $this->container['tech_size_name'] = $tech_size_name;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int|null $price Цена
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency_iso_code4217
     *
     * @return string|null
     */
    public function getCurrencyIsoCode4217()
    {
        return $this->container['currency_iso_code4217'];
    }

    /**
     * Sets currency_iso_code4217
     *
     * @param string|null $currency_iso_code4217 Валюта, по стандарту ISO 4217
     *
     * @return self
     */
    public function setCurrencyIsoCode4217($currency_iso_code4217)
    {
        if (is_null($currency_iso_code4217)) {
            throw new \InvalidArgumentException('non-nullable currency_iso_code4217 cannot be null');
        }
        $this->container['currency_iso_code4217'] = $currency_iso_code4217;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return int|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param int|null $discount Скидка, %
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets club_discount
     *
     * @return int|null
     */
    public function getClubDiscount()
    {
        return $this->container['club_discount'];
    }

    /**
     * Sets club_discount
     *
     * @param int|null $club_discount Скидка WB Клуба, %
     *
     * @return self
     */
    public function setClubDiscount($club_discount)
    {
        if (is_null($club_discount)) {
            throw new \InvalidArgumentException('non-nullable club_discount cannot be null');
        }
        $this->container['club_discount'] = $club_discount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status Статус товара:    * `2` — товар без ошибок, цена и/или скидка обновилась   * `3` — есть ошибки, данные не обновились
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_text
     *
     * @return string|null
     */
    public function getErrorText()
    {
        return $this->container['error_text'];
    }

    /**
     * Sets error_text
     *
     * @param string|null $error_text Текст ошибки  <div class=\"description_important\">   Ошибка <code>The product is in quarantine</code> возникает, если новая цена со скидкой хотя бы в 3 раза меньше старой. Вы можете изменить цену или скидку с помощью API либо вывести товар из карантина <a href=\"https://seller.wildberries.ru/discount-and-prices/quarantine\">в личном кабинете</a> </div>
     *
     * @return self
     */
    public function setErrorText($error_text)
    {
        if (is_null($error_text)) {
            throw new \InvalidArgumentException('non-nullable error_text cannot be null');
        }
        $this->container['error_text'] = $error_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


