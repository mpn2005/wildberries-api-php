<?php
/**
 * ContentV2GetCardsListPostRequestSettingsFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Работа с товарами
 *
 * <div class=\"description_important\">       Узнать больше о работе с товарами можно в <a href=\"https://seller.wildberries.ru/instructions/category/8eeeafc6-4b7a-453d-925a-00fc56510f67?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">справочном центре</a> </div>  Работа с товарами включает в себя:   1. [Создание](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) и [редактирование](/openapi/work-with-products#tag/Kartochki-tovarov) карточек товаров: в том числе, получение [категорий, предметов и характеристик товаров](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) и загрузку [медиафайлов](/openapi/work-with-products#tag/Mediafajly).   2. Настройку [ярлыков](/openapi/work-with-products#tag/Yarlyki) для удобного поиска товаров.   3. Установку [цен и скидок](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Управление [остатками товаров](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) и [складами](/openapi/work-with-products#tag/Sklady-prodavca), если вы работаете по модели продаж со склада продавца.
 *
 * The version of the OpenAPI document: products
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContentV2GetCardsListPostRequestSettingsFilter Class Doc Comment
 *
 * @category Class
 * @description Параметры фильтрации
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContentV2GetCardsListPostRequestSettingsFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_content_v2_get_cards_list_post_request_settings_filter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'with_photo' => 'int',
        'text_search' => 'string',
        'tag_ids' => 'int[]',
        'allowed_categories_only' => 'bool',
        'object_ids' => 'int[]',
        'brands' => 'string[]',
        'imt_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'with_photo' => null,
        'text_search' => null,
        'tag_ids' => null,
        'allowed_categories_only' => null,
        'object_ids' => null,
        'brands' => null,
        'imt_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'with_photo' => false,
        'text_search' => false,
        'tag_ids' => false,
        'allowed_categories_only' => false,
        'object_ids' => false,
        'brands' => false,
        'imt_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'with_photo' => 'withPhoto',
        'text_search' => 'textSearch',
        'tag_ids' => 'tagIDs',
        'allowed_categories_only' => 'allowedCategoriesOnly',
        'object_ids' => 'objectIDs',
        'brands' => 'brands',
        'imt_id' => 'imtID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'with_photo' => 'setWithPhoto',
        'text_search' => 'setTextSearch',
        'tag_ids' => 'setTagIds',
        'allowed_categories_only' => 'setAllowedCategoriesOnly',
        'object_ids' => 'setObjectIds',
        'brands' => 'setBrands',
        'imt_id' => 'setImtId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'with_photo' => 'getWithPhoto',
        'text_search' => 'getTextSearch',
        'tag_ids' => 'getTagIds',
        'allowed_categories_only' => 'getAllowedCategoriesOnly',
        'object_ids' => 'getObjectIds',
        'brands' => 'getBrands',
        'imt_id' => 'getImtId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('with_photo', $data ?? [], null);
        $this->setIfExists('text_search', $data ?? [], null);
        $this->setIfExists('tag_ids', $data ?? [], null);
        $this->setIfExists('allowed_categories_only', $data ?? [], null);
        $this->setIfExists('object_ids', $data ?? [], null);
        $this->setIfExists('brands', $data ?? [], null);
        $this->setIfExists('imt_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets with_photo
     *
     * @return int|null
     */
    public function getWithPhoto()
    {
        return $this->container['with_photo'];
    }

    /**
     * Sets with_photo
     *
     * @param int|null $with_photo Фильтр по фото:      * `0` — только карточки без фото   * `1` — только карточки с фото   * `-1` — все карточки товара
     *
     * @return self
     */
    public function setWithPhoto($with_photo)
    {
        if (is_null($with_photo)) {
            throw new \InvalidArgumentException('non-nullable with_photo cannot be null');
        }
        $this->container['with_photo'] = $with_photo;

        return $this;
    }

    /**
     * Gets text_search
     *
     * @return string|null
     */
    public function getTextSearch()
    {
        return $this->container['text_search'];
    }

    /**
     * Sets text_search
     *
     * @param string|null $text_search Поиск по артикулу продавца, артикулу WB, баркоду
     *
     * @return self
     */
    public function setTextSearch($text_search)
    {
        if (is_null($text_search)) {
            throw new \InvalidArgumentException('non-nullable text_search cannot be null');
        }
        $this->container['text_search'] = $text_search;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return int[]|null
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param int[]|null $tag_ids Поиск по ID ярлыков
     *
     * @return self
     */
    public function setTagIds($tag_ids)
    {
        if (is_null($tag_ids)) {
            throw new \InvalidArgumentException('non-nullable tag_ids cannot be null');
        }
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets allowed_categories_only
     *
     * @return bool|null
     */
    public function getAllowedCategoriesOnly()
    {
        return $this->container['allowed_categories_only'];
    }

    /**
     * Sets allowed_categories_only
     *
     * @param bool|null $allowed_categories_only Фильтр по категории. `true` - только разрешённые, `false` - все. Не используется в песочнице
     *
     * @return self
     */
    public function setAllowedCategoriesOnly($allowed_categories_only)
    {
        if (is_null($allowed_categories_only)) {
            throw new \InvalidArgumentException('non-nullable allowed_categories_only cannot be null');
        }
        $this->container['allowed_categories_only'] = $allowed_categories_only;

        return $this;
    }

    /**
     * Gets object_ids
     *
     * @return int[]|null
     */
    public function getObjectIds()
    {
        return $this->container['object_ids'];
    }

    /**
     * Sets object_ids
     *
     * @param int[]|null $object_ids Поиск по id предметов
     *
     * @return self
     */
    public function setObjectIds($object_ids)
    {
        if (is_null($object_ids)) {
            throw new \InvalidArgumentException('non-nullable object_ids cannot be null');
        }
        $this->container['object_ids'] = $object_ids;

        return $this;
    }

    /**
     * Gets brands
     *
     * @return string[]|null
     */
    public function getBrands()
    {
        return $this->container['brands'];
    }

    /**
     * Sets brands
     *
     * @param string[]|null $brands Поиск по брендам
     *
     * @return self
     */
    public function setBrands($brands)
    {
        if (is_null($brands)) {
            throw new \InvalidArgumentException('non-nullable brands cannot be null');
        }
        $this->container['brands'] = $brands;

        return $this;
    }

    /**
     * Gets imt_id
     *
     * @return int|null
     */
    public function getImtId()
    {
        return $this->container['imt_id'];
    }

    /**
     * Sets imt_id
     *
     * @param int|null $imt_id Поиск по ID карточки товара
     *
     * @return self
     */
    public function setImtId($imt_id)
    {
        if (is_null($imt_id)) {
            throw new \InvalidArgumentException('non-nullable imt_id cannot be null');
        }
        $this->container['imt_id'] = $imt_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


